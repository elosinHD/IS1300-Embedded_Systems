
TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080023b8  080023b8  000033b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023fc  080023fc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080023fc  080023fc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023fc  080023fc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023fc  080023fc  000033fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002400  08002400  00003400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002404  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002410  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002410  00004094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fe3  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001804  00000000  00000000  0000b01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0000c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ea  00000000  00000000  0000d028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cbd  00000000  00000000  0000d612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009644  00000000  00000000  000322cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e085b  00000000  00000000  0003b913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c16e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e68  00000000  00000000  0011c1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0011e01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023a0 	.word	0x080023a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023a0 	.word	0x080023a0

080001c8 <lights_display>:
#include "spi.h"
#include "gpio.h"
#include "Trafficlights_functions.h"

void lights_display(uint8_t *lights)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit(&hspi3, lights, 3, HAL_MAX_DELAY);
 80001d0:	f04f 33ff 	mov.w	r3, #4294967295
 80001d4:	2203      	movs	r2, #3
 80001d6:	6879      	ldr	r1, [r7, #4]
 80001d8:	4809      	ldr	r0, [pc, #36]	@ (8000200 <lights_display+0x38>)
 80001da:	f001 fdda 	bl	8001d92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001e4:	4807      	ldr	r0, [pc, #28]	@ (8000204 <lights_display+0x3c>)
 80001e6:	f000 feed 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_RESET);
 80001ea:	2200      	movs	r2, #0
 80001ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <lights_display+0x3c>)
 80001f2:	f000 fee7 	bl	8000fc4 <HAL_GPIO_WritePin>
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	2000002c 	.word	0x2000002c
 8000204:	48000400 	.word	0x48000400

08000208 <blinkinglights>:

void blinkinglights(lightsstates *curr)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if (curr->p_north == pred)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b06      	cmp	r3, #6
 8000216:	d103      	bne.n	8000220 <blinkinglights+0x18>
	{
		curr->p_north = blue; // Lägg till blått (blink)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2204      	movs	r2, #4
 800021c:	701a      	strb	r2, [r3, #0]
	}
	else if (curr->p_north == blue)
	{
		curr->p_north = pred; // Tillbaka till rött (ingen blink)
	}
}
 800021e:	e006      	b.n	800022e <blinkinglights+0x26>
	else if (curr->p_north == blue)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b04      	cmp	r3, #4
 8000226:	d102      	bne.n	800022e <blinkinglights+0x26>
		curr->p_north = pred; // Tillbaka till rött (ingen blink)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2206      	movs	r2, #6
 800022c:	701a      	strb	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
	...

0800023c <formatlights>:

void formatlights(uint8_t *lights, lightsstates *curr)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
	lights[0] = 0;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	701a      	strb	r2, [r3, #0]
	lights[1] = 0;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	3301      	adds	r3, #1
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
	lights[2] = 0;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3302      	adds	r3, #2
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
	switch (curr->t_NorthAndSouth)
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	785b      	ldrb	r3, [r3, #1]
 8000260:	2b03      	cmp	r3, #3
 8000262:	d016      	beq.n	8000292 <formatlights+0x56>
 8000264:	2b03      	cmp	r3, #3
 8000266:	dc36      	bgt.n	80002d6 <formatlights+0x9a>
 8000268:	2b00      	cmp	r3, #0
 800026a:	d023      	beq.n	80002b4 <formatlights+0x78>
 800026c:	2b01      	cmp	r3, #1
 800026e:	d132      	bne.n	80002d6 <formatlights+0x9a>
	{
	case green:
		lights[0] |= 0b100;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	f043 0304 	orr.w	r3, r3, #4
 8000278:	b2da      	uxtb	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	701a      	strb	r2, [r3, #0]
		lights[1] |= 0b100000;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	3301      	adds	r3, #1
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	f042 0220 	orr.w	r2, r2, #32
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	701a      	strb	r2, [r3, #0]
		break;
 8000290:	e022      	b.n	80002d8 <formatlights+0x9c>
	case yellow:
		lights[0] |= 0b1000;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	f043 0308 	orr.w	r3, r3, #8
 800029a:	b2da      	uxtb	r2, r3
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	701a      	strb	r2, [r3, #0]
		lights[1] |= 0b1000000;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	781a      	ldrb	r2, [r3, #0]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3301      	adds	r3, #1
 80002aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	701a      	strb	r2, [r3, #0]
		break;
 80002b2:	e011      	b.n	80002d8 <formatlights+0x9c>
	case red:
		lights[0] |= 0b10000;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	f043 0310 	orr.w	r3, r3, #16
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	701a      	strb	r2, [r3, #0]
		lights[1] |= 0b10000000;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	701a      	strb	r2, [r3, #0]
		break;
 80002d4:	e000      	b.n	80002d8 <formatlights+0x9c>
	default:
		break;
 80002d6:	bf00      	nop
	}

	switch (curr->p_north)
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	3b02      	subs	r3, #2
 80002de:	2b04      	cmp	r3, #4
 80002e0:	d82f      	bhi.n	8000342 <formatlights+0x106>
 80002e2:	a201      	add	r2, pc, #4	@ (adr r2, 80002e8 <formatlights+0xac>)
 80002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e8:	080002fd 	.word	0x080002fd
 80002ec:	08000343 	.word	0x08000343
 80002f0:	08000325 	.word	0x08000325
 80002f4:	08000339 	.word	0x08000339
 80002f8:	08000311 	.word	0x08000311
	{
	case pgreen:
		lights[1] |= 0b1000;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3301      	adds	r3, #1
 8000300:	781a      	ldrb	r2, [r3, #0]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3301      	adds	r3, #1
 8000306:	f042 0208 	orr.w	r2, r2, #8
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	701a      	strb	r2, [r3, #0]
		break;
 800030e:	e019      	b.n	8000344 <formatlights+0x108>
	case pred:
		lights[1] |= 0b10000;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3301      	adds	r3, #1
 8000314:	781a      	ldrb	r2, [r3, #0]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3301      	adds	r3, #1
 800031a:	f042 0210 	orr.w	r2, r2, #16
 800031e:	b2d2      	uxtb	r2, r2
 8000320:	701a      	strb	r2, [r3, #0]
		break;
 8000322:	e00f      	b.n	8000344 <formatlights+0x108>
	case blue:
		lights[1] |= 0b10100;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3301      	adds	r3, #1
 8000328:	781a      	ldrb	r2, [r3, #0]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3301      	adds	r3, #1
 800032e:	f042 0214 	orr.w	r2, r2, #20
 8000332:	b2d2      	uxtb	r2, r2
 8000334:	701a      	strb	r2, [r3, #0]
		break;
 8000336:	e005      	b.n	8000344 <formatlights+0x108>
	case off:
		lights[1] |= 0b00000;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3301      	adds	r3, #1
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	7852      	ldrb	r2, [r2, #1]
 8000340:	701a      	strb	r2, [r3, #0]
	default:
		break;
 8000342:	bf00      	nop
	}
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 030c 	add.w	r3, r7, #12
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b40      	ldr	r3, [pc, #256]	@ (8000468 <MX_GPIO_Init+0x118>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800036a:	4a3f      	ldr	r2, [pc, #252]	@ (8000468 <MX_GPIO_Init+0x118>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000372:	4b3d      	ldr	r3, [pc, #244]	@ (8000468 <MX_GPIO_Init+0x118>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037e:	4b3a      	ldr	r3, [pc, #232]	@ (8000468 <MX_GPIO_Init+0x118>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000382:	4a39      	ldr	r2, [pc, #228]	@ (8000468 <MX_GPIO_Init+0x118>)
 8000384:	f043 0302 	orr.w	r3, r3, #2
 8000388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800038a:	4b37      	ldr	r3, [pc, #220]	@ (8000468 <MX_GPIO_Init+0x118>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038e:	f003 0302 	and.w	r3, r3, #2
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b34      	ldr	r3, [pc, #208]	@ (8000468 <MX_GPIO_Init+0x118>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	4a33      	ldr	r2, [pc, #204]	@ (8000468 <MX_GPIO_Init+0x118>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a2:	4b31      	ldr	r3, [pc, #196]	@ (8000468 <MX_GPIO_Init+0x118>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003b4:	482d      	ldr	r0, [pc, #180]	@ (800046c <MX_GPIO_Init+0x11c>)
 80003b6:	f000 fe05 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2180      	movs	r1, #128	@ 0x80
 80003be:	482c      	ldr	r0, [pc, #176]	@ (8000470 <MX_GPIO_Init+0x120>)
 80003c0:	f000 fe00 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ce:	f000 fdf9 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STCP_Pin */
  GPIO_InitStruct.Pin = STCP_Pin;
 80003d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	2301      	movs	r3, #1
 80003da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STCP_GPIO_Port, &GPIO_InitStruct);
 80003e4:	f107 030c 	add.w	r3, r7, #12
 80003e8:	4619      	mov	r1, r3
 80003ea:	4820      	ldr	r0, [pc, #128]	@ (800046c <MX_GPIO_Init+0x11c>)
 80003ec:	f000 fc28 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80003f0:	2380      	movs	r3, #128	@ 0x80
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 030c 	add.w	r3, r7, #12
 8000404:	4619      	mov	r1, r3
 8000406:	481a      	ldr	r0, [pc, #104]	@ (8000470 <MX_GPIO_Init+0x120>)
 8000408:	f000 fc1a 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800040c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	4619      	mov	r1, r3
 8000424:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000428:	f000 fc0a 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : P_North_Pin */
  GPIO_InitStruct.Pin = P_North_Pin;
 800042c:	2380      	movs	r3, #128	@ 0x80
 800042e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000434:	2301      	movs	r3, #1
 8000436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(P_North_GPIO_Port, &GPIO_InitStruct);
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	4619      	mov	r1, r3
 800043e:	480b      	ldr	r0, [pc, #44]	@ (800046c <MX_GPIO_Init+0x11c>)
 8000440:	f000 fbfe 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000444:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	4619      	mov	r1, r3
 8000458:	4804      	ldr	r0, [pc, #16]	@ (800046c <MX_GPIO_Init+0x11c>)
 800045a:	f000 fbf1 	bl	8000c40 <HAL_GPIO_Init>

}
 800045e:	bf00      	nop
 8000460:	3720      	adds	r7, #32
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	48000400 	.word	0x48000400
 8000470:	48000800 	.word	0x48000800

08000474 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047a:	f000 fa62 	bl	8000942 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047e:	f000 f8c7 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000482:	f7ff ff65 	bl	8000350 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000486:	f000 f90f 	bl	80006a8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  states.p_north = pred;          // Red for pedestrians
 800048a:	4b5e      	ldr	r3, [pc, #376]	@ (8000604 <main+0x190>)
 800048c:	2206      	movs	r2, #6
 800048e:	701a      	strb	r2, [r3, #0]
  states.t_NorthAndSouth = green; // Green for cars
 8000490:	4b5c      	ldr	r3, [pc, #368]	@ (8000604 <main+0x190>)
 8000492:	2201      	movs	r2, #1
 8000494:	705a      	strb	r2, [r3, #1]
  uint8_t lights[3] = {0};
 8000496:	4b5c      	ldr	r3, [pc, #368]	@ (8000608 <main+0x194>)
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	803b      	strh	r3, [r7, #0]
 800049c:	2300      	movs	r3, #0
 800049e:	70bb      	strb	r3, [r7, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Normal state: Green for cars, Red for pedestrians
    formatlights(lights, &states);
 80004a0:	463b      	mov	r3, r7
 80004a2:	4958      	ldr	r1, [pc, #352]	@ (8000604 <main+0x190>)
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fec9 	bl	800023c <formatlights>
    lights_display(lights);
 80004aa:	463b      	mov	r3, r7
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fe8b 	bl	80001c8 <lights_display>

    if (HAL_GPIO_ReadPin(P_North_GPIO_Port, P_North_Pin) == GPIO_PIN_RESET)
 80004b2:	2180      	movs	r1, #128	@ 0x80
 80004b4:	4855      	ldr	r0, [pc, #340]	@ (800060c <main+0x198>)
 80004b6:	f000 fd6d 	bl	8000f94 <HAL_GPIO_ReadPin>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d1ef      	bne.n	80004a0 <main+0x2c>
    {
      // Blink the pedestrian light until car light changes
        states.t_NorthAndSouth = yellow;  // Change car signal to yellow
 80004c0:	4b50      	ldr	r3, [pc, #320]	@ (8000604 <main+0x190>)
 80004c2:	2203      	movs	r2, #3
 80004c4:	705a      	strb	r2, [r3, #1]
        formatlights(lights, &states);
 80004c6:	463b      	mov	r3, r7
 80004c8:	494e      	ldr	r1, [pc, #312]	@ (8000604 <main+0x190>)
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff feb6 	bl	800023c <formatlights>
        lights_display(lights);
 80004d0:	463b      	mov	r3, r7
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fe78 	bl	80001c8 <lights_display>

        int count = (orangeDelay/toggleFreq);
 80004d8:	2306      	movs	r3, #6
 80004da:	60fb      	str	r3, [r7, #12]
        while (count != 0)
 80004dc:	e012      	b.n	8000504 <main+0x90>
      {
        blinkinglights(&states);  // Toggle between blue and off
 80004de:	4849      	ldr	r0, [pc, #292]	@ (8000604 <main+0x190>)
 80004e0:	f7ff fe92 	bl	8000208 <blinkinglights>
        formatlights(lights, &states);
 80004e4:	463b      	mov	r3, r7
 80004e6:	4947      	ldr	r1, [pc, #284]	@ (8000604 <main+0x190>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fea7 	bl	800023c <formatlights>
        lights_display(lights);
 80004ee:	463b      	mov	r3, r7
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff fe69 	bl	80001c8 <lights_display>
        HAL_Delay(toggleFreq);
 80004f6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80004fa:	f000 fa97 	bl	8000a2c <HAL_Delay>
        count--;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3b01      	subs	r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
        while (count != 0)
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1e9      	bne.n	80004de <main+0x6a>
      }
       
        formatlights(lights, &states);
 800050a:	463b      	mov	r3, r7
 800050c:	493d      	ldr	r1, [pc, #244]	@ (8000604 <main+0x190>)
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff fe94 	bl	800023c <formatlights>
        lights_display(lights);
 8000514:	463b      	mov	r3, r7
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe56 	bl	80001c8 <lights_display>

      // After the pedestrian button is pressed, make car lights red for pedestrian crossing
      states.t_NorthAndSouth = red; // Set car signal to red
 800051c:	4b39      	ldr	r3, [pc, #228]	@ (8000604 <main+0x190>)
 800051e:	2200      	movs	r2, #0
 8000520:	705a      	strb	r2, [r3, #1]
      formatlights(lights, &states);
 8000522:	463b      	mov	r3, r7
 8000524:	4937      	ldr	r1, [pc, #220]	@ (8000604 <main+0x190>)
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe88 	bl	800023c <formatlights>
      lights_display(lights);
 800052c:	463b      	mov	r3, r7
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fe4a 	bl	80001c8 <lights_display>

      int count1 = (pedestrianDelay/toggleFreq); 
 8000534:	2306      	movs	r3, #6
 8000536:	60bb      	str	r3, [r7, #8]
      while (count1 != 0)
 8000538:	e012      	b.n	8000560 <main+0xec>
      {
        blinkinglights(&states);  // Toggle between blue and off
 800053a:	4832      	ldr	r0, [pc, #200]	@ (8000604 <main+0x190>)
 800053c:	f7ff fe64 	bl	8000208 <blinkinglights>
        formatlights(lights, &states);
 8000540:	463b      	mov	r3, r7
 8000542:	4930      	ldr	r1, [pc, #192]	@ (8000604 <main+0x190>)
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff fe79 	bl	800023c <formatlights>
        lights_display(lights);
 800054a:	463b      	mov	r3, r7
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe3b 	bl	80001c8 <lights_display>
        HAL_Delay(toggleFreq);
 8000552:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000556:	f000 fa69 	bl	8000a2c <HAL_Delay>
        count1--;
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	3b01      	subs	r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
      while (count1 != 0)
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1e9      	bne.n	800053a <main+0xc6>
      }

      // Turn pedestrian signal green for walking
      states.p_north = pgreen;
 8000566:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <main+0x190>)
 8000568:	2202      	movs	r2, #2
 800056a:	701a      	strb	r2, [r3, #0]
      formatlights(lights, &states);
 800056c:	463b      	mov	r3, r7
 800056e:	4925      	ldr	r1, [pc, #148]	@ (8000604 <main+0x190>)
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe63 	bl	800023c <formatlights>
      lights_display(lights);
 8000576:	463b      	mov	r3, r7
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff fe25 	bl	80001c8 <lights_display>

      HAL_Delay(walkingDelay); // Pedestrian light stays green for walkingDelay
 800057e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000582:	f000 fa53 	bl	8000a2c <HAL_Delay>

      // Blink pedestrian signal before switching back to red
      for (int i = 0; i < 6; i++) {
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	e01a      	b.n	80005c2 <main+0x14e>
        if (states.p_north == pgreen) {
 800058c:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <main+0x190>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d103      	bne.n	800059c <main+0x128>
          states.p_north = off; // Turn off pedestrian signal
 8000594:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <main+0x190>)
 8000596:	2205      	movs	r2, #5
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e002      	b.n	80005a2 <main+0x12e>
        } else {
          states.p_north = pgreen; // Toggle pedestrian signal back to green
 800059c:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <main+0x190>)
 800059e:	2202      	movs	r2, #2
 80005a0:	701a      	strb	r2, [r3, #0]
        }
        formatlights(lights, &states);
 80005a2:	463b      	mov	r3, r7
 80005a4:	4917      	ldr	r1, [pc, #92]	@ (8000604 <main+0x190>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe48 	bl	800023c <formatlights>
        lights_display(lights);
 80005ac:	463b      	mov	r3, r7
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe0a 	bl	80001c8 <lights_display>
        HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005b8:	f000 fa38 	bl	8000a2c <HAL_Delay>
      for (int i = 0; i < 6; i++) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b05      	cmp	r3, #5
 80005c6:	dde1      	ble.n	800058c <main+0x118>
      }

      // After pedestrian crossing, switch pedestrian signal to red
      states.p_north = pred;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <main+0x190>)
 80005ca:	2206      	movs	r2, #6
 80005cc:	701a      	strb	r2, [r3, #0]
      formatlights(lights, &states);
 80005ce:	463b      	mov	r3, r7
 80005d0:	490c      	ldr	r1, [pc, #48]	@ (8000604 <main+0x190>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fe32 	bl	800023c <formatlights>
      lights_display(lights);
 80005d8:	463b      	mov	r3, r7
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fdf4 	bl	80001c8 <lights_display>

      // Wait for a safety delay before switching car signal back to green
      HAL_Delay(2000);
 80005e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005e4:	f000 fa22 	bl	8000a2c <HAL_Delay>

      // Transition car signal back to green
      states.t_NorthAndSouth = green;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <main+0x190>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	705a      	strb	r2, [r3, #1]
      formatlights(lights, &states);
 80005ee:	463b      	mov	r3, r7
 80005f0:	4904      	ldr	r1, [pc, #16]	@ (8000604 <main+0x190>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe22 	bl	800023c <formatlights>
      lights_display(lights);
 80005f8:	463b      	mov	r3, r7
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fde4 	bl	80001c8 <lights_display>
    formatlights(lights, &states);
 8000600:	e74e      	b.n	80004a0 <main+0x2c>
 8000602:	bf00      	nop
 8000604:	20000028 	.word	0x20000028
 8000608:	080023b8 	.word	0x080023b8
 800060c:	48000400 	.word	0x48000400

08000610 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	@ 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	@ 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fe92 	bl	8002348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000636:	f000 fceb 	bl	8001010 <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 f82c 	bl	800069c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000644:	2310      	movs	r3, #16
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	@ 0x60
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fd2d 	bl	80010bc <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000668:	f000 f818 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800066c:	230f      	movs	r3, #15
 800066e:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f8f5 	bl	8001874 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000690:	f000 f804 	bl	800069c <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3758      	adds	r7, #88	@ 0x58
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <Error_Handler+0x8>

080006a8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_SPI3_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <MX_SPI3_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_SPI3_Init+0x74>)
 80006b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_SPI3_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_SPI3_Init+0x74>)
 80006c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_SPI3_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_SPI3_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_SPI3_Init+0x74>)
 80006d6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_SPI3_Init+0x74>)
 80006de:	2230      	movs	r2, #48	@ 0x30
 80006e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_SPI3_Init+0x74>)
 80006e4:	2280      	movs	r2, #128	@ 0x80
 80006e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_SPI3_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_SPI3_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_SPI3_Init+0x74>)
 80006f6:	2207      	movs	r2, #7
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_SPI3_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_SPI3_Init+0x74>)
 8000702:	2208      	movs	r2, #8
 8000704:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_SPI3_Init+0x74>)
 8000708:	f001 faa0 	bl	8001c4c <HAL_SPI_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000712:	f7ff ffc3 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000002c 	.word	0x2000002c
 8000720:	40003c00 	.word	0x40003c00

08000724 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	@ 0x30
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a34      	ldr	r2, [pc, #208]	@ (8000814 <HAL_SPI_MspInit+0xf0>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d161      	bne.n	800080a <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000746:	4b34      	ldr	r3, [pc, #208]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074a:	4a33      	ldr	r2, [pc, #204]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 800074c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000750:	6593      	str	r3, [r2, #88]	@ 0x58
 8000752:	4b31      	ldr	r3, [pc, #196]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a2d      	ldr	r2, [pc, #180]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a27      	ldr	r2, [pc, #156]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a21      	ldr	r2, [pc, #132]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <HAL_SPI_MspInit+0xf4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a6:	2310      	movs	r3, #16
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007b6:	2306      	movs	r3, #6
 80007b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c4:	f000 fa3c 	bl	8000c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007da:	2306      	movs	r3, #6
 80007dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	480d      	ldr	r0, [pc, #52]	@ (800081c <HAL_SPI_MspInit+0xf8>)
 80007e6:	f000 fa2b 	bl	8000c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ea:	2320      	movs	r3, #32
 80007ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007fa:	2306      	movs	r3, #6
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4806      	ldr	r0, [pc, #24]	@ (8000820 <HAL_SPI_MspInit+0xfc>)
 8000806:	f000 fa1b 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	3730      	adds	r7, #48	@ 0x30
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40003c00 	.word	0x40003c00
 8000818:	40021000 	.word	0x40021000
 800081c:	48000800 	.word	0x48000800
 8000820:	48000400 	.word	0x48000400

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	@ (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	@ 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	@ 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f893 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000928 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff ffea 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	@ (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	@ (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	@ (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 fd1b 	bl	8002358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000922:	f7ff fda7 	bl	8000474 <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000928:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	08002404 	.word	0x08002404
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	20000094 	.word	0x20000094

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>

08000942 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f943 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f80e 	bl	8000974 <HAL_InitTick>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e001      	b.n	8000968 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000964:	f7ff ff5e 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000968:	79fb      	ldrb	r3, [r7, #7]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <HAL_InitTick+0x6c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d023      	beq.n	80009d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <HAL_InitTick+0x70>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <HAL_InitTick+0x6c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000996:	fbb3 f3f1 	udiv	r3, r3, r1
 800099a:	fbb2 f3f3 	udiv	r3, r2, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f941 	bl	8000c26 <HAL_SYSTICK_Config>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10f      	bne.n	80009ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d809      	bhi.n	80009c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f000 f919 	bl	8000bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_InitTick+0x74>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e007      	b.n	80009d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	e004      	b.n	80009d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e001      	b.n	80009d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_IncTick+0x20>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_IncTick+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <HAL_IncTick+0x24>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000090 	.word	0x20000090

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000090 	.word	0x20000090

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a34:	f7ff ffee 	bl	8000a14 <HAL_GetTick>
 8000a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d005      	beq.n	8000a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_Delay+0x44>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a52:	bf00      	nop
 8000a54:	f7ff ffde 	bl	8000a14 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8f7      	bhi.n	8000a54 <HAL_Delay+0x28>
  {
  }
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	@ (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	@ (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	@ 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	@ 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff8e 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff47 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff5c 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff8e 	bl	8000b2c <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffb0 	bl	8000b94 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	e17f      	b.n	8000f50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8171 	beq.w	8000f4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d005      	beq.n	8000c80 <HAL_GPIO_Init+0x40>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 0201 	and.w	r2, r3, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d118      	bne.n	8000d20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	08db      	lsrs	r3, r3, #3
 8000d0a:	f003 0201 	and.w	r2, r3, #1
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d017      	beq.n	8000d5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d123      	bne.n	8000db0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	08da      	lsrs	r2, r3, #3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3208      	adds	r2, #8
 8000d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	08da      	lsrs	r2, r3, #3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3208      	adds	r2, #8
 8000daa:	6939      	ldr	r1, [r7, #16]
 8000dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0203 	and.w	r2, r3, #3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80ac 	beq.w	8000f4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f70 <HAL_GPIO_Init+0x330>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df6:	4a5e      	ldr	r2, [pc, #376]	@ (8000f70 <HAL_GPIO_Init+0x330>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8000f70 <HAL_GPIO_Init+0x330>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e0a:	4a5a      	ldr	r2, [pc, #360]	@ (8000f74 <HAL_GPIO_Init+0x334>)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e34:	d025      	beq.n	8000e82 <HAL_GPIO_Init+0x242>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4f      	ldr	r2, [pc, #316]	@ (8000f78 <HAL_GPIO_Init+0x338>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d01f      	beq.n	8000e7e <HAL_GPIO_Init+0x23e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4e      	ldr	r2, [pc, #312]	@ (8000f7c <HAL_GPIO_Init+0x33c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0x23a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4d      	ldr	r2, [pc, #308]	@ (8000f80 <HAL_GPIO_Init+0x340>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x236>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4c      	ldr	r2, [pc, #304]	@ (8000f84 <HAL_GPIO_Init+0x344>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x232>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4b      	ldr	r2, [pc, #300]	@ (8000f88 <HAL_GPIO_Init+0x348>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x22e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4a      	ldr	r2, [pc, #296]	@ (8000f8c <HAL_GPIO_Init+0x34c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x22a>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e00c      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	e00a      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e008      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e72:	2304      	movs	r3, #4
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e82:	2300      	movs	r3, #0
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	f002 0203 	and.w	r2, r2, #3
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e94:	4937      	ldr	r1, [pc, #220]	@ (8000f74 <HAL_GPIO_Init+0x334>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8000f90 <HAL_GPIO_Init+0x350>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ec6:	4a32      	ldr	r2, [pc, #200]	@ (8000f90 <HAL_GPIO_Init+0x350>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ecc:	4b30      	ldr	r3, [pc, #192]	@ (8000f90 <HAL_GPIO_Init+0x350>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ef0:	4a27      	ldr	r2, [pc, #156]	@ (8000f90 <HAL_GPIO_Init+0x350>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ef6:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <HAL_GPIO_Init+0x350>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f90 <HAL_GPIO_Init+0x350>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <HAL_GPIO_Init+0x350>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f44:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <HAL_GPIO_Init+0x350>)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f ae78 	bne.w	8000c50 <HAL_GPIO_Init+0x10>
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000c00 	.word	0x48000c00
 8000f84:	48001000 	.word	0x48001000
 8000f88:	48001400 	.word	0x48001400
 8000f8c:	48001800 	.word	0x48001800
 8000f90:	40010400 	.word	0x40010400

08000f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e001      	b.n	8000fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <HAL_PWREx_GetVoltageRange+0x18>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40007000 	.word	0x40007000

08001010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800101e:	d130      	bne.n	8001082 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001020:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800102c:	d038      	beq.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800102e:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001036:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001038:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800103c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800103e:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2232      	movs	r2, #50	@ 0x32
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	4a1b      	ldr	r2, [pc, #108]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	0c9b      	lsrs	r3, r3, #18
 8001050:	3301      	adds	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001054:	e002      	b.n	800105c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3b01      	subs	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001068:	d102      	bne.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x60>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f2      	bne.n	8001056 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800107c:	d110      	bne.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e00f      	b.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800108a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800108e:	d007      	beq.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001098:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800109e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40007000 	.word	0x40007000
 80010b4:	20000000 	.word	0x20000000
 80010b8:	431bde83 	.word	0x431bde83

080010bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e3ca      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ce:	4b97      	ldr	r3, [pc, #604]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010d8:	4b94      	ldr	r3, [pc, #592]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 80e4 	beq.w	80012b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <HAL_RCC_OscConfig+0x4a>
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b0c      	cmp	r3, #12
 80010fa:	f040 808b 	bne.w	8001214 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b01      	cmp	r3, #1
 8001102:	f040 8087 	bne.w	8001214 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001106:	4b89      	ldr	r3, [pc, #548]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <HAL_RCC_OscConfig+0x62>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e3a2      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1a      	ldr	r2, [r3, #32]
 8001122:	4b82      	ldr	r3, [pc, #520]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d004      	beq.n	8001138 <HAL_RCC_OscConfig+0x7c>
 800112e:	4b7f      	ldr	r3, [pc, #508]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001136:	e005      	b.n	8001144 <HAL_RCC_OscConfig+0x88>
 8001138:	4b7c      	ldr	r3, [pc, #496]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800113a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001144:	4293      	cmp	r3, r2
 8001146:	d223      	bcs.n	8001190 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fd1d 	bl	8001b8c <RCC_SetFlashLatencyFromMSIRange>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e383      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800115c:	4b73      	ldr	r3, [pc, #460]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a72      	ldr	r2, [pc, #456]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b70      	ldr	r3, [pc, #448]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	496d      	ldr	r1, [pc, #436]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800117a:	4b6c      	ldr	r3, [pc, #432]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	4968      	ldr	r1, [pc, #416]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800118a:	4313      	orrs	r3, r2
 800118c:	604b      	str	r3, [r1, #4]
 800118e:	e025      	b.n	80011dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001190:	4b66      	ldr	r3, [pc, #408]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a65      	ldr	r2, [pc, #404]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b63      	ldr	r3, [pc, #396]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4960      	ldr	r1, [pc, #384]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ae:	4b5f      	ldr	r3, [pc, #380]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	495b      	ldr	r1, [pc, #364]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fcdd 	bl	8001b8c <RCC_SetFlashLatencyFromMSIRange>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e343      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011dc:	f000 fc4a 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80011e0:	4602      	mov	r2, r0
 80011e2:	4b52      	ldr	r3, [pc, #328]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	4950      	ldr	r1, [pc, #320]	@ (8001330 <HAL_RCC_OscConfig+0x274>)
 80011ee:	5ccb      	ldrb	r3, [r1, r3]
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
 80011f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001334 <HAL_RCC_OscConfig+0x278>)
 80011fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001338 <HAL_RCC_OscConfig+0x27c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fbb7 	bl	8000974 <HAL_InitTick>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d052      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	e327      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d032      	beq.n	8001282 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800121c:	4b43      	ldr	r3, [pc, #268]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a42      	ldr	r2, [pc, #264]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001228:	f7ff fbf4 	bl	8000a14 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001230:	f7ff fbf0 	bl	8000a14 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e310      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001242:	4b3a      	ldr	r3, [pc, #232]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124e:	4b37      	ldr	r3, [pc, #220]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a36      	ldr	r2, [pc, #216]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b34      	ldr	r3, [pc, #208]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4931      	ldr	r1, [pc, #196]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800126c:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	492c      	ldr	r1, [pc, #176]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	e01a      	b.n	80012b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001282:	4b2a      	ldr	r3, [pc, #168]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a29      	ldr	r2, [pc, #164]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800128e:	f7ff fbc1 	bl	8000a14 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001296:	f7ff fbbd 	bl	8000a14 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e2dd      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f0      	bne.n	8001296 <HAL_RCC_OscConfig+0x1da>
 80012b4:	e000      	b.n	80012b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d074      	beq.n	80013ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x21a>
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d10e      	bne.n	80012ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d10b      	bne.n	80012ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d064      	beq.n	80013ac <HAL_RCC_OscConfig+0x2f0>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d160      	bne.n	80013ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e2ba      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f6:	d106      	bne.n	8001306 <HAL_RCC_OscConfig+0x24a>
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 80012fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e026      	b.n	8001354 <HAL_RCC_OscConfig+0x298>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800130e:	d115      	bne.n	800133c <HAL_RCC_OscConfig+0x280>
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a05      	ldr	r2, [pc, #20]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001316:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a02      	ldr	r2, [pc, #8]	@ (800132c <HAL_RCC_OscConfig+0x270>)
 8001322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e014      	b.n	8001354 <HAL_RCC_OscConfig+0x298>
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	080023bc 	.word	0x080023bc
 8001334:	20000000 	.word	0x20000000
 8001338:	20000004 	.word	0x20000004
 800133c:	4ba0      	ldr	r3, [pc, #640]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a9f      	ldr	r2, [pc, #636]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b9d      	ldr	r3, [pc, #628]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a9c      	ldr	r2, [pc, #624]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fb5a 	bl	8000a14 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fb56 	bl	8000a14 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e276      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001376:	4b92      	ldr	r3, [pc, #584]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x2a8>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fb46 	bl	8000a14 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fb42 	bl	8000a14 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	@ 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e262      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800139e:	4b88      	ldr	r3, [pc, #544]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x2d0>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d060      	beq.n	800147c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d005      	beq.n	80013cc <HAL_RCC_OscConfig+0x310>
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	d119      	bne.n	80013fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d116      	bne.n	80013fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013cc:	4b7c      	ldr	r3, [pc, #496]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x328>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e23f      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b76      	ldr	r3, [pc, #472]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	4973      	ldr	r1, [pc, #460]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f8:	e040      	b.n	800147c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d023      	beq.n	800144a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001402:	4b6f      	ldr	r3, [pc, #444]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a6e      	ldr	r2, [pc, #440]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fb01 	bl	8000a14 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fafd 	bl	8000a14 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e21d      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001428:	4b65      	ldr	r3, [pc, #404]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b62      	ldr	r3, [pc, #392]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	061b      	lsls	r3, r3, #24
 8001442:	495f      	ldr	r1, [pc, #380]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e018      	b.n	800147c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b5d      	ldr	r3, [pc, #372]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a5c      	ldr	r2, [pc, #368]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fadd 	bl	8000a14 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fad9 	bl	8000a14 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1f9      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001470:	4b53      	ldr	r3, [pc, #332]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d03c      	beq.n	8001502 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01c      	beq.n	80014ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001490:	4b4b      	ldr	r3, [pc, #300]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001496:	4a4a      	ldr	r2, [pc, #296]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fab8 	bl	8000a14 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fab4 	bl	8000a14 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e1d4      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ba:	4b41      	ldr	r3, [pc, #260]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80014bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ef      	beq.n	80014a8 <HAL_RCC_OscConfig+0x3ec>
 80014c8:	e01b      	b.n	8001502 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ca:	4b3d      	ldr	r3, [pc, #244]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80014cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014d0:	4a3b      	ldr	r2, [pc, #236]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014da:	f7ff fa9b 	bl	8000a14 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e2:	f7ff fa97 	bl	8000a14 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e1b7      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014f4:	4b32      	ldr	r3, [pc, #200]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80014f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1ef      	bne.n	80014e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80a6 	beq.w	800165c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001514:	4b2a      	ldr	r3, [pc, #168]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10d      	bne.n	800153c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	4a26      	ldr	r2, [pc, #152]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152a:	6593      	str	r3, [r2, #88]	@ 0x58
 800152c:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001538:	2301      	movs	r3, #1
 800153a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153c:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <HAL_RCC_OscConfig+0x508>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d118      	bne.n	800157a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001548:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <HAL_RCC_OscConfig+0x508>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <HAL_RCC_OscConfig+0x508>)
 800154e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001552:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001554:	f7ff fa5e 	bl	8000a14 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155c:	f7ff fa5a 	bl	8000a14 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e17a      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_RCC_OscConfig+0x508>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d108      	bne.n	8001594 <HAL_RCC_OscConfig+0x4d8>
 8001582:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 8001584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001592:	e029      	b.n	80015e8 <HAL_RCC_OscConfig+0x52c>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d115      	bne.n	80015c8 <HAL_RCC_OscConfig+0x50c>
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a2:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ac:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80015ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b2:	4a03      	ldr	r2, [pc, #12]	@ (80015c0 <HAL_RCC_OscConfig+0x504>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015bc:	e014      	b.n	80015e8 <HAL_RCC_OscConfig+0x52c>
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40007000 	.word	0x40007000
 80015c8:	4b9c      	ldr	r3, [pc, #624]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ce:	4a9b      	ldr	r2, [pc, #620]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015d8:	4b98      	ldr	r3, [pc, #608]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80015da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015de:	4a97      	ldr	r2, [pc, #604]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d016      	beq.n	800161e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fa10 	bl	8000a14 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fa0c 	bl	8000a14 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e12a      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800160e:	4b8b      	ldr	r3, [pc, #556]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0ed      	beq.n	80015f8 <HAL_RCC_OscConfig+0x53c>
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff f9f9 	bl	8000a14 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff f9f5 	bl	8000a14 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e113      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800163c:	4b7f      	ldr	r3, [pc, #508]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ed      	bne.n	8001626 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b7a      	ldr	r3, [pc, #488]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	4a79      	ldr	r2, [pc, #484]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800165a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80fe 	beq.w	8001862 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166a:	2b02      	cmp	r3, #2
 800166c:	f040 80d0 	bne.w	8001810 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001670:	4b72      	ldr	r3, [pc, #456]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001680:	429a      	cmp	r2, r3
 8001682:	d130      	bne.n	80016e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	3b01      	subs	r3, #1
 8001690:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d127      	bne.n	80016e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d11f      	bne.n	80016e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016b0:	2a07      	cmp	r2, #7
 80016b2:	bf14      	ite	ne
 80016b4:	2201      	movne	r2, #1
 80016b6:	2200      	moveq	r2, #0
 80016b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d113      	bne.n	80016e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	3b01      	subs	r3, #1
 80016cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d06e      	beq.n	80017c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	d069      	beq.n	80017c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016ec:	4b53      	ldr	r3, [pc, #332]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016f8:	4b50      	ldr	r3, [pc, #320]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0ad      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001708:	4b4c      	ldr	r3, [pc, #304]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a4b      	ldr	r2, [pc, #300]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 800170e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001712:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001714:	f7ff f97e 	bl	8000a14 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff f97a 	bl	8000a14 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e09a      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800172e:	4b43      	ldr	r3, [pc, #268]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173a:	4b40      	ldr	r3, [pc, #256]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	4b40      	ldr	r3, [pc, #256]	@ (8001840 <HAL_RCC_OscConfig+0x784>)
 8001740:	4013      	ands	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800174a:	3a01      	subs	r2, #1
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001754:	0212      	lsls	r2, r2, #8
 8001756:	4311      	orrs	r1, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800175c:	0852      	lsrs	r2, r2, #1
 800175e:	3a01      	subs	r2, #1
 8001760:	0552      	lsls	r2, r2, #21
 8001762:	4311      	orrs	r1, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001768:	0852      	lsrs	r2, r2, #1
 800176a:	3a01      	subs	r2, #1
 800176c:	0652      	lsls	r2, r2, #25
 800176e:	4311      	orrs	r1, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001774:	0912      	lsrs	r2, r2, #4
 8001776:	0452      	lsls	r2, r2, #17
 8001778:	430a      	orrs	r2, r1
 800177a:	4930      	ldr	r1, [pc, #192]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 800177c:	4313      	orrs	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001780:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a2d      	ldr	r2, [pc, #180]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800178a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800178c:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a2a      	ldr	r2, [pc, #168]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001798:	f7ff f93c 	bl	8000a14 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f938 	bl	8000a14 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e058      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b2:	4b22      	ldr	r3, [pc, #136]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017be:	e050      	b.n	8001862 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e04f      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c4:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d148      	bne.n	8001862 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a16      	ldr	r2, [pc, #88]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017e8:	f7ff f914 	bl	8000a14 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f910 	bl	8000a14 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e030      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x734>
 800180e:	e028      	b.n	8001862 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d023      	beq.n	800185e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a08      	ldr	r2, [pc, #32]	@ (800183c <HAL_RCC_OscConfig+0x780>)
 800181c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff f8f7 	bl	8000a14 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001828:	e00c      	b.n	8001844 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff f8f3 	bl	8000a14 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d905      	bls.n	8001844 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e013      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
 800183c:	40021000 	.word	0x40021000
 8001840:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <HAL_RCC_OscConfig+0x7b0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ec      	bne.n	800182a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_RCC_OscConfig+0x7b0>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	4905      	ldr	r1, [pc, #20]	@ (800186c <HAL_RCC_OscConfig+0x7b0>)
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_RCC_OscConfig+0x7b4>)
 8001858:	4013      	ands	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
 800185c:	e001      	b.n	8001862 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	feeefffc 	.word	0xfeeefffc

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0e7      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b75      	ldr	r3, [pc, #468]	@ (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d910      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b72      	ldr	r3, [pc, #456]	@ (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 0207 	bic.w	r2, r3, #7
 800189e:	4970      	ldr	r1, [pc, #448]	@ (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cf      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d010      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	4b66      	ldr	r3, [pc, #408]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d908      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b63      	ldr	r3, [pc, #396]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4960      	ldr	r1, [pc, #384]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d04c      	beq.n	800198c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d121      	bne.n	800194a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0a6      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001912:	4b54      	ldr	r3, [pc, #336]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d115      	bne.n	800194a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e09a      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800192a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e08e      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800193a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e086      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800194a:	4b46      	ldr	r3, [pc, #280]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f023 0203 	bic.w	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4943      	ldr	r1, [pc, #268]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	4313      	orrs	r3, r2
 800195a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800195c:	f7ff f85a 	bl	8000a14 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	e00a      	b.n	800197a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7ff f856 	bl	8000a14 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e06e      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 020c 	and.w	r2, r3, #12
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	429a      	cmp	r2, r3
 800198a:	d1eb      	bne.n	8001964 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d010      	beq.n	80019ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d208      	bcs.n	80019ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	492b      	ldr	r1, [pc, #172]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ba:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d210      	bcs.n	80019ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c8:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 0207 	bic.w	r2, r3, #7
 80019d0:	4923      	ldr	r1, [pc, #140]	@ (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d8:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e036      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4918      	ldr	r1, [pc, #96]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a14:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4910      	ldr	r1, [pc, #64]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a28:	f000 f824 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	490b      	ldr	r1, [pc, #44]	@ (8001a68 <HAL_RCC_ClockConfig+0x1f4>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <HAL_RCC_ClockConfig+0x1f8>)
 8001a46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_RCC_ClockConfig+0x1fc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe ff91 	bl	8000974 <HAL_InitTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a56:	7afb      	ldrb	r3, [r7, #11]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	080023bc 	.word	0x080023bc
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a82:	4b3e      	ldr	r3, [pc, #248]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d121      	bne.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d11e      	bne.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001aa8:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e005      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10d      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d102      	bne.n	8001af2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	e004      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001af8:	4b23      	ldr	r3, [pc, #140]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001afa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d134      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d003      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0xac>
 8001b18:	e005      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b1c:	617b      	str	r3, [r7, #20]
      break;
 8001b1e:	e005      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b22:	617b      	str	r3, [r7, #20]
      break;
 8001b24:	e002      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	617b      	str	r3, [r7, #20]
      break;
 8001b2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	3301      	adds	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	fb03 f202 	mul.w	r2, r3, r2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	0e5b      	lsrs	r3, r3, #25
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	@ 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	080023cc 	.word	0x080023cc
 8001b84:	00f42400 	.word	0x00f42400
 8001b88:	007a1200 	.word	0x007a1200

08001b8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ba4:	f7ff fa26 	bl	8000ff4 <HAL_PWREx_GetVoltageRange>
 8001ba8:	6178      	str	r0, [r7, #20]
 8001baa:	e014      	b.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bac:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	4a24      	ldr	r2, [pc, #144]	@ (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bc4:	f7ff fa16 	bl	8000ff4 <HAL_PWREx_GetVoltageRange>
 8001bc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bdc:	d10b      	bne.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b80      	cmp	r3, #128	@ 0x80
 8001be2:	d919      	bls.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001be8:	d902      	bls.n	8001bf0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bea:	2302      	movs	r3, #2
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e013      	b.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e010      	b.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b80      	cmp	r3, #128	@ 0x80
 8001bfa:	d902      	bls.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	e00a      	b.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b80      	cmp	r3, #128	@ 0x80
 8001c06:	d102      	bne.n	8001c0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c08:	2302      	movs	r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	e004      	b.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b70      	cmp	r3, #112	@ 0x70
 8001c12:	d101      	bne.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c14:	2301      	movs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 0207 	bic.w	r2, r3, #7
 8001c20:	4909      	ldr	r1, [pc, #36]	@ (8001c48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c28:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40022000 	.word	0x40022000

08001c4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e095      	b.n	8001d8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c6e:	d009      	beq.n	8001c84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
 8001c76:	e005      	b.n	8001c84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7fe fd40 	bl	8000724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001cc4:	d902      	bls.n	8001ccc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e002      	b.n	8001cd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001cda:	d007      	beq.n	8001cec <HAL_SPI_Init+0xa0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001ce4:	d002      	beq.n	8001cec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2e:	ea42 0103 	orr.w	r1, r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	f003 0204 	and.w	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001d68:	ea42 0103 	orr.w	r1, r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b088      	sub	sp, #32
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001da2:	f7fe fe37 	bl	8000a14 <HAL_GetTick>
 8001da6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d001      	beq.n	8001dbc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
 8001dba:	e15c      	b.n	8002076 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <HAL_SPI_Transmit+0x36>
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e154      	b.n	8002076 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_SPI_Transmit+0x48>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e14d      	b.n	8002076 <HAL_SPI_Transmit+0x2e4>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	88fa      	ldrh	r2, [r7, #6]
 8001dfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e2c:	d10f      	bne.n	8001e4e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e58:	2b40      	cmp	r3, #64	@ 0x40
 8001e5a:	d007      	beq.n	8001e6c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e74:	d952      	bls.n	8001f1c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_SPI_Transmit+0xf2>
 8001e7e:	8b7b      	ldrh	r3, [r7, #26]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d145      	bne.n	8001f10 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e94:	1c9a      	adds	r2, r3, #2
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ea8:	e032      	b.n	8001f10 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d112      	bne.n	8001ede <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebc:	881a      	ldrh	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec8:	1c9a      	adds	r2, r3, #2
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001edc:	e018      	b.n	8001f10 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ede:	f7fe fd99 	bl	8000a14 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d803      	bhi.n	8001ef6 <HAL_SPI_Transmit+0x164>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d102      	bne.n	8001efc <HAL_SPI_Transmit+0x16a>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0b2      	b.n	8002076 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1c7      	bne.n	8001eaa <HAL_SPI_Transmit+0x118>
 8001f1a:	e083      	b.n	8002024 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_SPI_Transmit+0x198>
 8001f24:	8b7b      	ldrh	r3, [r7, #26]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d177      	bne.n	800201a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d912      	bls.n	8001f5a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f38:	881a      	ldrh	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f44:	1c9a      	adds	r2, r3, #2
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b02      	subs	r3, #2
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f58:	e05f      	b.n	800201a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	330c      	adds	r3, #12
 8001f64:	7812      	ldrb	r2, [r2, #0]
 8001f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001f80:	e04b      	b.n	800201a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d12b      	bne.n	8001fe8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d912      	bls.n	8001fc0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001faa:	1c9a      	adds	r2, r3, #2
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b02      	subs	r3, #2
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001fbe:	e02c      	b.n	800201a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	330c      	adds	r3, #12
 8001fca:	7812      	ldrb	r2, [r2, #0]
 8001fcc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001fe6:	e018      	b.n	800201a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe8:	f7fe fd14 	bl	8000a14 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d803      	bhi.n	8002000 <HAL_SPI_Transmit+0x26e>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d102      	bne.n	8002006 <HAL_SPI_Transmit+0x274>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e02d      	b.n	8002076 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ae      	bne.n	8001f82 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f947 	bl	80022bc <SPI_EndRxTxTransaction>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10a      	bne.n	8002058 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002074:	2300      	movs	r3, #0
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	3720      	adds	r7, #32
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002090:	f7fe fcc0 	bl	8000a14 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020a0:	f7fe fcb8 	bl	8000a14 <HAL_GetTick>
 80020a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020a6:	4b39      	ldr	r3, [pc, #228]	@ (800218c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	015b      	lsls	r3, r3, #5
 80020ac:	0d1b      	lsrs	r3, r3, #20
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020b6:	e054      	b.n	8002162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d050      	beq.n	8002162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020c0:	f7fe fca8 	bl	8000a14 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d902      	bls.n	80020d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d13d      	bne.n	8002152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80020e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020ee:	d111      	bne.n	8002114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020f8:	d004      	beq.n	8002104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002102:	d107      	bne.n	8002114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800211c:	d10f      	bne.n	800213e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800213c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e017      	b.n	8002182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3b01      	subs	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4013      	ands	r3, r2
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	429a      	cmp	r2, r3
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	429a      	cmp	r2, r3
 800217e:	d19b      	bne.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000

08002190 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80021a2:	f7fe fc37 	bl	8000a14 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80021b2:	f7fe fc2f 	bl	8000a14 <HAL_GetTick>
 80021b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	330c      	adds	r3, #12
 80021be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80021c0:	4b3d      	ldr	r3, [pc, #244]	@ (80022b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00da      	lsls	r2, r3, #3
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	0d1b      	lsrs	r3, r3, #20
 80021d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80021d8:	e060      	b.n	800229c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80021e0:	d107      	bne.n	80021f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d050      	beq.n	800229c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021fa:	f7fe fc0b 	bl	8000a14 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002206:	429a      	cmp	r2, r3
 8002208:	d902      	bls.n	8002210 <SPI_WaitFifoStateUntilTimeout+0x80>
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	d13d      	bne.n	800228c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800221e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002228:	d111      	bne.n	800224e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002232:	d004      	beq.n	800223e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800223c:	d107      	bne.n	800224e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800224c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002256:	d10f      	bne.n	8002278 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002276:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e010      	b.n	80022ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	3b01      	subs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d196      	bne.n	80021da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3728      	adds	r7, #40	@ 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000000 	.word	0x20000000

080022bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f7ff ff5b 	bl	8002190 <SPI_WaitFifoStateUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e027      	b.n	8002340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	2180      	movs	r1, #128	@ 0x80
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff fec0 	bl	8002080 <SPI_WaitFlagStateUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e014      	b.n	8002340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7ff ff34 	bl	8002190 <SPI_WaitFifoStateUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002332:	f043 0220 	orr.w	r2, r3, #32
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e000      	b.n	8002340 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <memset>:
 8002348:	4402      	add	r2, r0
 800234a:	4603      	mov	r3, r0
 800234c:	4293      	cmp	r3, r2
 800234e:	d100      	bne.n	8002352 <memset+0xa>
 8002350:	4770      	bx	lr
 8002352:	f803 1b01 	strb.w	r1, [r3], #1
 8002356:	e7f9      	b.n	800234c <memset+0x4>

08002358 <__libc_init_array>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d0d      	ldr	r5, [pc, #52]	@ (8002390 <__libc_init_array+0x38>)
 800235c:	4c0d      	ldr	r4, [pc, #52]	@ (8002394 <__libc_init_array+0x3c>)
 800235e:	1b64      	subs	r4, r4, r5
 8002360:	10a4      	asrs	r4, r4, #2
 8002362:	2600      	movs	r6, #0
 8002364:	42a6      	cmp	r6, r4
 8002366:	d109      	bne.n	800237c <__libc_init_array+0x24>
 8002368:	4d0b      	ldr	r5, [pc, #44]	@ (8002398 <__libc_init_array+0x40>)
 800236a:	4c0c      	ldr	r4, [pc, #48]	@ (800239c <__libc_init_array+0x44>)
 800236c:	f000 f818 	bl	80023a0 <_init>
 8002370:	1b64      	subs	r4, r4, r5
 8002372:	10a4      	asrs	r4, r4, #2
 8002374:	2600      	movs	r6, #0
 8002376:	42a6      	cmp	r6, r4
 8002378:	d105      	bne.n	8002386 <__libc_init_array+0x2e>
 800237a:	bd70      	pop	{r4, r5, r6, pc}
 800237c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002380:	4798      	blx	r3
 8002382:	3601      	adds	r6, #1
 8002384:	e7ee      	b.n	8002364 <__libc_init_array+0xc>
 8002386:	f855 3b04 	ldr.w	r3, [r5], #4
 800238a:	4798      	blx	r3
 800238c:	3601      	adds	r6, #1
 800238e:	e7f2      	b.n	8002376 <__libc_init_array+0x1e>
 8002390:	080023fc 	.word	0x080023fc
 8002394:	080023fc 	.word	0x080023fc
 8002398:	080023fc 	.word	0x080023fc
 800239c:	08002400 	.word	0x08002400

080023a0 <_init>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	bf00      	nop
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr

080023ac <_fini>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr
