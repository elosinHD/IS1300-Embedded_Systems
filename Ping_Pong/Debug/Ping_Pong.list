
Ping_Pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f38  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080020c0  080020c0  000030c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002100  08002100  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002100  08002100  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002100  08002100  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002100  08002100  00003100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002104  08002104  00003104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002108  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08002114  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08002114  00004030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d91  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001477  00000000  00000000  00008dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000a248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000048b  00000000  00000000  0000a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024657  00000000  00000000  0000ad1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007520  00000000  00000000  0002f372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de513  00000000  00000000  00036892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114da5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000166c  00000000  00000000  00114de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00116454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020a8 	.word	0x080020a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080020a8 	.word	0x080020a8

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b4d      	ldr	r3, [pc, #308]	@ (8000314 <MX_GPIO_Init+0x14c>)
 80001e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000314 <MX_GPIO_Init+0x14c>)
 80001e4:	f043 0304 	orr.w	r3, r3, #4
 80001e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80001ea:	4b4a      	ldr	r3, [pc, #296]	@ (8000314 <MX_GPIO_Init+0x14c>)
 80001ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ee:	f003 0304 	and.w	r3, r3, #4
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001f6:	4b47      	ldr	r3, [pc, #284]	@ (8000314 <MX_GPIO_Init+0x14c>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fa:	4a46      	ldr	r2, [pc, #280]	@ (8000314 <MX_GPIO_Init+0x14c>)
 80001fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000202:	4b44      	ldr	r3, [pc, #272]	@ (8000314 <MX_GPIO_Init+0x14c>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b41      	ldr	r3, [pc, #260]	@ (8000314 <MX_GPIO_Init+0x14c>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000212:	4a40      	ldr	r2, [pc, #256]	@ (8000314 <MX_GPIO_Init+0x14c>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800021a:	4b3e      	ldr	r3, [pc, #248]	@ (8000314 <MX_GPIO_Init+0x14c>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000226:	4b3b      	ldr	r3, [pc, #236]	@ (8000314 <MX_GPIO_Init+0x14c>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022a:	4a3a      	ldr	r2, [pc, #232]	@ (8000314 <MX_GPIO_Init+0x14c>)
 800022c:	f043 0302 	orr.w	r3, r3, #2
 8000230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000232:	4b38      	ldr	r3, [pc, #224]	@ (8000314 <MX_GPIO_Init+0x14c>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000236:	f003 0302 	and.w	r3, r3, #2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000248:	f001 f8be 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED7_Pin|LED8_Pin, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2160      	movs	r1, #96	@ 0x60
 8000250:	4831      	ldr	r0, [pc, #196]	@ (8000318 <MX_GPIO_Init+0x150>)
 8000252:	f001 f8b9 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f641 0106 	movw	r1, #6150	@ 0x1806
 800025c:	482f      	ldr	r0, [pc, #188]	@ (800031c <MX_GPIO_Init+0x154>)
 800025e:	f001 f8b3 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000262:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000268:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800026c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	4619      	mov	r1, r3
 8000278:	4827      	ldr	r0, [pc, #156]	@ (8000318 <MX_GPIO_Init+0x150>)
 800027a:	f000 fee3 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED5_Pin|LED6_Pin;
 800027e:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000284:	2301      	movs	r3, #1
 8000286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000288:	2300      	movs	r3, #0
 800028a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	4619      	mov	r1, r3
 8000296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029a:	f000 fed3 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED7_Pin|LED8_Pin;
 800029e:	2360      	movs	r3, #96	@ 0x60
 80002a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2300      	movs	r3, #0
 80002ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	4619      	mov	r1, r3
 80002b4:	4818      	ldr	r0, [pc, #96]	@ (8000318 <MX_GPIO_Init+0x150>)
 80002b6:	f000 fec5 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80002ba:	f641 0306 	movw	r3, #6150	@ 0x1806
 80002be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c0:	2301      	movs	r3, #1
 80002c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	2300      	movs	r3, #0
 80002c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c8:	2300      	movs	r3, #0
 80002ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	4812      	ldr	r0, [pc, #72]	@ (800031c <MX_GPIO_Init+0x154>)
 80002d4:	f000 feb6 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_button_Pin;
 80002d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e2:	2301      	movs	r3, #1
 80002e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_button_GPIO_Port, &GPIO_InitStruct);
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	4619      	mov	r1, r3
 80002ec:	480b      	ldr	r0, [pc, #44]	@ (800031c <MX_GPIO_Init+0x154>)
 80002ee:	f000 fea9 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_button_Pin;
 80002f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_button_GPIO_Port, &GPIO_InitStruct);
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4619      	mov	r1, r3
 8000306:	4804      	ldr	r0, [pc, #16]	@ (8000318 <MX_GPIO_Init+0x150>)
 8000308:	f000 fe9c 	bl	8001044 <HAL_GPIO_Init>

}
 800030c:	bf00      	nop
 800030e:	3728      	adds	r7, #40	@ 0x28
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40021000 	.word	0x40021000
 8000318:	48000800 	.word	0x48000800
 800031c:	48000400 	.word	0x48000400

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f000 fd0f 	bl	8000d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f87e 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f7ff ff4c 	bl	80001c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
#else
  Pingpong();
 8000330:	f000 f8d2 	bl	80004d8 <Pingpong>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // Led 1
 8000334:	2201      	movs	r2, #1
 8000336:	2102      	movs	r1, #2
 8000338:	4839      	ldr	r0, [pc, #228]	@ (8000420 <main+0x100>)
 800033a:	f001 f845 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800033e:	2032      	movs	r0, #50	@ 0x32
 8000340:	f000 fd76 	bl	8000e30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2102      	movs	r1, #2
 8000348:	4835      	ldr	r0, [pc, #212]	@ (8000420 <main+0x100>)
 800034a:	f001 f83d 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); // Led 2
 800034e:	2201      	movs	r2, #1
 8000350:	2104      	movs	r1, #4
 8000352:	4833      	ldr	r0, [pc, #204]	@ (8000420 <main+0x100>)
 8000354:	f001 f838 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000358:	2032      	movs	r0, #50	@ 0x32
 800035a:	f000 fd69 	bl	8000e30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2104      	movs	r1, #4
 8000362:	482f      	ldr	r0, [pc, #188]	@ (8000420 <main+0x100>)
 8000364:	f001 f830 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); // Led 3
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800036e:	482c      	ldr	r0, [pc, #176]	@ (8000420 <main+0x100>)
 8000370:	f001 f82a 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000374:	2032      	movs	r0, #50	@ 0x32
 8000376:	f000 fd5b 	bl	8000e30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000380:	4827      	ldr	r0, [pc, #156]	@ (8000420 <main+0x100>)
 8000382:	f001 f821 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET); // Led 4
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800038c:	4824      	ldr	r0, [pc, #144]	@ (8000420 <main+0x100>)
 800038e:	f001 f81b 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000392:	2032      	movs	r0, #50	@ 0x32
 8000394:	f000 fd4c 	bl	8000e30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800039e:	4820      	ldr	r0, [pc, #128]	@ (8000420 <main+0x100>)
 80003a0:	f001 f812 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET); // Led 5
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ae:	f001 f80b 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 80003b2:	2032      	movs	r0, #50	@ 0x32
 80003b4:	f000 fd3c 	bl	8000e30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c2:	f001 f801 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET); // Led 6
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003d0:	f000 fffa 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 80003d4:	2032      	movs	r0, #50	@ 0x32
 80003d6:	f000 fd2b 	bl	8000e30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e4:	f000 fff0 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET); // Led 7
 80003e8:	2201      	movs	r2, #1
 80003ea:	2120      	movs	r1, #32
 80003ec:	480d      	ldr	r0, [pc, #52]	@ (8000424 <main+0x104>)
 80003ee:	f000 ffeb 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 80003f2:	2032      	movs	r0, #50	@ 0x32
 80003f4:	f000 fd1c 	bl	8000e30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2120      	movs	r1, #32
 80003fc:	4809      	ldr	r0, [pc, #36]	@ (8000424 <main+0x104>)
 80003fe:	f000 ffe3 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET); // Led 8
 8000402:	2201      	movs	r2, #1
 8000404:	2140      	movs	r1, #64	@ 0x40
 8000406:	4807      	ldr	r0, [pc, #28]	@ (8000424 <main+0x104>)
 8000408:	f000 ffde 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800040c:	2032      	movs	r0, #50	@ 0x32
 800040e:	f000 fd0f 	bl	8000e30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2140      	movs	r1, #64	@ 0x40
 8000416:	4803      	ldr	r0, [pc, #12]	@ (8000424 <main+0x104>)
 8000418:	f000 ffd6 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // Led 1
 800041c:	bf00      	nop
 800041e:	e789      	b.n	8000334 <main+0x14>
 8000420:	48000400 	.word	0x48000400
 8000424:	48000800 	.word	0x48000800

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b096      	sub	sp, #88	@ 0x58
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	2244      	movs	r2, #68	@ 0x44
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f001 fe0a 	bl	8002050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	463b      	mov	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800044a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800044e:	f000 ffe1 	bl	8001414 <HAL_PWREx_ControlVoltageScaling>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000458:	f000 f837 	bl	80004ca <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800045c:	2302      	movs	r3, #2
 800045e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000464:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000466:	2310      	movs	r3, #16
 8000468:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	2302      	movs	r3, #2
 800046c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800046e:	2302      	movs	r3, #2
 8000470:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000472:	2301      	movs	r3, #1
 8000474:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000476:	230a      	movs	r3, #10
 8000478:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800047a:	2307      	movs	r3, #7
 800047c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800047e:	2302      	movs	r3, #2
 8000480:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000482:	2302      	movs	r3, #2
 8000484:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4618      	mov	r0, r3
 800048c:	f001 f818 	bl	80014c0 <HAL_RCC_OscConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000496:	f000 f818 	bl	80004ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	230f      	movs	r3, #15
 800049c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	2303      	movs	r3, #3
 80004a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004ae:	463b      	mov	r3, r7
 80004b0:	2104      	movs	r1, #4
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fbe0 	bl	8001c78 <HAL_RCC_ClockConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004be:	f000 f804 	bl	80004ca <Error_Handler>
  }
}
 80004c2:	bf00      	nop
 80004c4:	3758      	adds	r7, #88	@ 0x58
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ce:	b672      	cpsid	i
}
 80004d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d2:	bf00      	nop
 80004d4:	e7fd      	b.n	80004d2 <Error_Handler+0x8>
	...

080004d8 <Pingpong>:
    Serve,
    Game_END
} states;
static states State, NextState;
void Pingpong(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
    bool ButtonPressed;   // To remember that button is pressed
    uint32_t Varv, Speed; // Ball speed
    uint8_t Led;          // LED nr
    State = Start;        // Initiate State to Start
 80004de:	4ba5      	ldr	r3, [pc, #660]	@ (8000774 <Pingpong+0x29c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
    NextState = Start;
 80004e4:	4ba4      	ldr	r3, [pc, #656]	@ (8000778 <Pingpong+0x2a0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
    /* Infinite loop */
    while (1)
    {
        State = NextState;
 80004ea:	4ba3      	ldr	r3, [pc, #652]	@ (8000778 <Pingpong+0x2a0>)
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	4ba1      	ldr	r3, [pc, #644]	@ (8000774 <Pingpong+0x29c>)
 80004f0:	701a      	strb	r2, [r3, #0]
        switch (State) // State machine
 80004f2:	4ba0      	ldr	r3, [pc, #640]	@ (8000774 <Pingpong+0x29c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	f200 813a 	bhi.w	8000770 <Pingpong+0x298>
 80004fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000504 <Pingpong+0x2c>)
 80004fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000502:	bf00      	nop
 8000504:	08000519 	.word	0x08000519
 8000508:	08000583 	.word	0x08000583
 800050c:	08000621 	.word	0x08000621
 8000510:	080006bf 	.word	0x080006bf
 8000514:	08000751 	.word	0x08000751
        {
        case Start: 
            Led_on(0);           // Turn off all LEDs
 8000518:	2000      	movs	r0, #0
 800051a:	f000 f931 	bl	8000780 <Led_on>
            Speed = 500000; // Number of loops
 800051e:	4b97      	ldr	r3, [pc, #604]	@ (800077c <Pingpong+0x2a4>)
 8000520:	617b      	str	r3, [r7, #20]
            int R_Score = 0;     // Reset R scores
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
            int L_Score = 0;     // Reset L scores
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
            int Served = 0;      // 1 = L served, 2 = R served
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
            if (L_hit() == true) // L serve
 800052e:	f000 fb57 	bl	8000be0 <L_hit>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00d      	beq.n	8000554 <Pingpong+0x7c>
            {
                Led = 1;
 8000538:	2301      	movs	r3, #1
 800053a:	74fb      	strb	r3, [r7, #19]
                Served = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
                NextState = MoveRight;
 8000540:	4b8d      	ldr	r3, [pc, #564]	@ (8000778 <Pingpong+0x2a0>)
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
                while (L_hit() == true); // wait until button is released
 8000546:	bf00      	nop
 8000548:	f000 fb4a 	bl	8000be0 <L_hit>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1fa      	bne.n	8000548 <Pingpong+0x70>
                NextState = MoveLeft;
                while (R_hit() == true); // wait until button is released
            }
            else
                NextState = Start; // Stay in Start state
            break;
 8000552:	e10e      	b.n	8000772 <Pingpong+0x29a>
            else if (R_hit() == true) // R serve
 8000554:	f000 fb56 	bl	8000c04 <R_hit>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00d      	beq.n	800057a <Pingpong+0xa2>
                Led = 8;
 800055e:	2308      	movs	r3, #8
 8000560:	74fb      	strb	r3, [r7, #19]
                Served = 2;
 8000562:	2302      	movs	r3, #2
 8000564:	607b      	str	r3, [r7, #4]
                NextState = MoveLeft;
 8000566:	4b84      	ldr	r3, [pc, #528]	@ (8000778 <Pingpong+0x2a0>)
 8000568:	2202      	movs	r2, #2
 800056a:	701a      	strb	r2, [r3, #0]
                while (R_hit() == true); // wait until button is released
 800056c:	bf00      	nop
 800056e:	f000 fb49 	bl	8000c04 <R_hit>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1fa      	bne.n	800056e <Pingpong+0x96>
            break;
 8000578:	e0fb      	b.n	8000772 <Pingpong+0x29a>
                NextState = Start; // Stay in Start state
 800057a:	4b7f      	ldr	r3, [pc, #508]	@ (8000778 <Pingpong+0x2a0>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
            break;
 8000580:	e0f7      	b.n	8000772 <Pingpong+0x29a>
        case MoveRight:
        {
            Led_on(Led);
 8000582:	7cfb      	ldrb	r3, [r7, #19]
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f8fb 	bl	8000780 <Led_on>
            Varv = Speed;
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	61bb      	str	r3, [r7, #24]
            while (Varv != 0)
 800058e:	e009      	b.n	80005a4 <Pingpong+0xcc>
            {
                if (R_hit())
 8000590:	f000 fb38 	bl	8000c04 <R_hit>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <Pingpong+0xc6>
                    ButtonPressed = true; // R hit
 800059a:	2301      	movs	r3, #1
 800059c:	77fb      	strb	r3, [r7, #31]
                Varv--;
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	61bb      	str	r3, [r7, #24]
            while (Varv != 0)
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1f2      	bne.n	8000590 <Pingpong+0xb8>
            }
            if (ButtonPressed) // R pressed
 80005aa:	7ffb      	ldrb	r3, [r7, #31]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d019      	beq.n	80005e4 <Pingpong+0x10c>
            {
                Speed -= 40000;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 80005b6:	3b40      	subs	r3, #64	@ 0x40
 80005b8:	617b      	str	r3, [r7, #20]
                if (Led == 8) // and LED8 activa
 80005ba:	7cfb      	ldrb	r3, [r7, #19]
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d105      	bne.n	80005cc <Pingpong+0xf4>
                {
                    NextState = MoveLeft; // return ball
 80005c0:	4b6d      	ldr	r3, [pc, #436]	@ (8000778 <Pingpong+0x2a0>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
                    Led = 7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	74fb      	strb	r3, [r7, #19]
 80005ca:	e01d      	b.n	8000608 <Pingpong+0x130>
                }
                else{
                    HAL_Delay(100);
 80005cc:	2064      	movs	r0, #100	@ 0x64
 80005ce:	f000 fc2f 	bl	8000e30 <HAL_Delay>
                NextState = Serve; // hit to early
 80005d2:	4b69      	ldr	r3, [pc, #420]	@ (8000778 <Pingpong+0x2a0>)
 80005d4:	2203      	movs	r2, #3
 80005d6:	701a      	strb	r2, [r3, #0]
                    L_Score++;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3301      	adds	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
                    Led_Flash();
 80005de:	f000 fa8b 	bl	8000af8 <Led_Flash>
 80005e2:	e011      	b.n	8000608 <Pingpong+0x130>
                }
            }
            else
            {
                if (Led == 9)
 80005e4:	7cfb      	ldrb	r3, [r7, #19]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d10b      	bne.n	8000602 <Pingpong+0x12a>
                { // no hit or to late
                    HAL_Delay(100);
 80005ea:	2064      	movs	r0, #100	@ 0x64
 80005ec:	f000 fc20 	bl	8000e30 <HAL_Delay>
                    NextState = Serve;
 80005f0:	4b61      	ldr	r3, [pc, #388]	@ (8000778 <Pingpong+0x2a0>)
 80005f2:	2203      	movs	r2, #3
 80005f4:	701a      	strb	r2, [r3, #0]
                    L_Score++;
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	3301      	adds	r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
                    Led_Flash();
 80005fc:	f000 fa7c 	bl	8000af8 <Led_Flash>
 8000600:	e002      	b.n	8000608 <Pingpong+0x130>
                }
                else{
                    NextState = MoveRight; // ball continues to move right
 8000602:	4b5d      	ldr	r3, [pc, #372]	@ (8000778 <Pingpong+0x2a0>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
                    }
            }
            if (!ButtonPressed)
 8000608:	7ffb      	ldrb	r3, [r7, #31]
 800060a:	f083 0301 	eor.w	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d002      	beq.n	800061a <Pingpong+0x142>
                Led++; // prepare to turn next LED on
 8000614:	7cfb      	ldrb	r3, [r7, #19]
 8000616:	3301      	adds	r3, #1
 8000618:	74fb      	strb	r3, [r7, #19]
            ButtonPressed = false;
 800061a:	2300      	movs	r3, #0
 800061c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800061e:	e0a8      	b.n	8000772 <Pingpong+0x29a>
        case MoveLeft:
        {
            Led_on(Led);
 8000620:	7cfb      	ldrb	r3, [r7, #19]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f8ac 	bl	8000780 <Led_on>
            Varv = Speed;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	61bb      	str	r3, [r7, #24]
            while (Varv != 0)
 800062c:	e009      	b.n	8000642 <Pingpong+0x16a>
            {
                if (L_hit())
 800062e:	f000 fad7 	bl	8000be0 <L_hit>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <Pingpong+0x164>
                    ButtonPressed = true; // L hit
 8000638:	2301      	movs	r3, #1
 800063a:	77fb      	strb	r3, [r7, #31]
                Varv--;
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	3b01      	subs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
            while (Varv != 0)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1f2      	bne.n	800062e <Pingpong+0x156>
            }
            if (ButtonPressed) // L pressed
 8000648:	7ffb      	ldrb	r3, [r7, #31]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d019      	beq.n	8000682 <Pingpong+0x1aa>
            {
                Speed -= 40000;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 8000654:	3b40      	subs	r3, #64	@ 0x40
 8000656:	617b      	str	r3, [r7, #20]
                if (Led == 1) // and LED1 active
 8000658:	7cfb      	ldrb	r3, [r7, #19]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d105      	bne.n	800066a <Pingpong+0x192>
                {
                    NextState = MoveRight; // return ball
 800065e:	4b46      	ldr	r3, [pc, #280]	@ (8000778 <Pingpong+0x2a0>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
                    Led = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	74fb      	strb	r3, [r7, #19]
 8000668:	e01d      	b.n	80006a6 <Pingpong+0x1ce>
                }
                else {
                    HAL_Delay(100);
 800066a:	2064      	movs	r0, #100	@ 0x64
 800066c:	f000 fbe0 	bl	8000e30 <HAL_Delay>
                NextState = Serve; // hit to early
 8000670:	4b41      	ldr	r3, [pc, #260]	@ (8000778 <Pingpong+0x2a0>)
 8000672:	2203      	movs	r2, #3
 8000674:	701a      	strb	r2, [r3, #0]
                    R_Score++;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	3301      	adds	r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
                    Led_Flash();
 800067c:	f000 fa3c 	bl	8000af8 <Led_Flash>
 8000680:	e011      	b.n	80006a6 <Pingpong+0x1ce>
                }
            }
            else
            {
                if (Led == 0)
 8000682:	7cfb      	ldrb	r3, [r7, #19]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d10b      	bne.n	80006a0 <Pingpong+0x1c8>
                { // no hit or to late
                    HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	@ 0x64
 800068a:	f000 fbd1 	bl	8000e30 <HAL_Delay>
                    NextState = Serve;
 800068e:	4b3a      	ldr	r3, [pc, #232]	@ (8000778 <Pingpong+0x2a0>)
 8000690:	2203      	movs	r2, #3
 8000692:	701a      	strb	r2, [r3, #0]
                    R_Score++;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3301      	adds	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
                    Led_Flash();
 800069a:	f000 fa2d 	bl	8000af8 <Led_Flash>
 800069e:	e002      	b.n	80006a6 <Pingpong+0x1ce>
                }
                else {
                    NextState = MoveLeft; // ball continues to move left
 80006a0:	4b35      	ldr	r3, [pc, #212]	@ (8000778 <Pingpong+0x2a0>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	701a      	strb	r2, [r3, #0]
                    }
            }
            if (!ButtonPressed)
 80006a6:	7ffb      	ldrb	r3, [r7, #31]
 80006a8:	f083 0301 	eor.w	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <Pingpong+0x1e0>
                Led--; // prepare to turn next LED on
 80006b2:	7cfb      	ldrb	r3, [r7, #19]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	74fb      	strb	r3, [r7, #19]
            ButtonPressed = false;
 80006b8:	2300      	movs	r3, #0
 80006ba:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80006bc:	e059      	b.n	8000772 <Pingpong+0x29a>
        case Serve:
        {
             Show_Points(L_Score, R_Score);      // Show points
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fa30 	bl	8000b2e <Show_Points>
             Speed = 500000; // Number of loops
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <Pingpong+0x2a4>)
 80006d0:	617b      	str	r3, [r7, #20]
             if(L_Score >= 4){
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	dd03      	ble.n	80006e0 <Pingpong+0x208>
                 NextState = Game_END;
 80006d8:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <Pingpong+0x2a0>)
 80006da:	2204      	movs	r2, #4
 80006dc:	701a      	strb	r2, [r3, #0]
             }
             else
                 NextState = Serve; // Stay in Serve state
             }          
        } // End of Serve
        break;
 80006de:	e048      	b.n	8000772 <Pingpong+0x29a>
             else if(R_Score >= 4){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	dd03      	ble.n	80006ee <Pingpong+0x216>
                 NextState = Game_END;
 80006e6:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <Pingpong+0x2a0>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	701a      	strb	r2, [r3, #0]
        break;
 80006ec:	e041      	b.n	8000772 <Pingpong+0x29a>
                if (L_hit() && Served == 2) // L serve
 80006ee:	f000 fa77 	bl	8000be0 <L_hit>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d010      	beq.n	800071a <Pingpong+0x242>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d10d      	bne.n	800071a <Pingpong+0x242>
                 Led = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	74fb      	strb	r3, [r7, #19]
                 NextState = MoveRight;
 8000702:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <Pingpong+0x2a0>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
                 Served = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
                 while (L_hit() == true)
 800070c:	bf00      	nop
 800070e:	f000 fa67 	bl	8000be0 <L_hit>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1fa      	bne.n	800070e <Pingpong+0x236>
                if (L_hit() && Served == 2) // L serve
 8000718:	e019      	b.n	800074e <Pingpong+0x276>
             else if ((R_hit() && Served == 1)) // R serve
 800071a:	f000 fa73 	bl	8000c04 <R_hit>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d010      	beq.n	8000746 <Pingpong+0x26e>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d10d      	bne.n	8000746 <Pingpong+0x26e>
                 Led = 8;
 800072a:	2308      	movs	r3, #8
 800072c:	74fb      	strb	r3, [r7, #19]
                 NextState = MoveLeft;
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <Pingpong+0x2a0>)
 8000730:	2202      	movs	r2, #2
 8000732:	701a      	strb	r2, [r3, #0]
                 Served = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	607b      	str	r3, [r7, #4]
                 while (R_hit() == true)
 8000738:	bf00      	nop
 800073a:	f000 fa63 	bl	8000c04 <R_hit>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1fa      	bne.n	800073a <Pingpong+0x262>
             else if ((R_hit() && Served == 1)) // R serve
 8000744:	e003      	b.n	800074e <Pingpong+0x276>
                 NextState = Serve; // Stay in Serve state
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <Pingpong+0x2a0>)
 8000748:	2203      	movs	r2, #3
 800074a:	701a      	strb	r2, [r3, #0]
        break;
 800074c:	e011      	b.n	8000772 <Pingpong+0x29a>
 800074e:	e010      	b.n	8000772 <Pingpong+0x29a>
        case Game_END: 
        {
            Show_End_Points(L_Score, R_Score); // Show points
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fa13 	bl	8000b86 <Show_End_Points>
            HAL_Delay(5000);
 8000760:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000764:	f000 fb64 	bl	8000e30 <HAL_Delay>
            NextState = Start;
 8000768:	4b03      	ldr	r3, [pc, #12]	@ (8000778 <Pingpong+0x2a0>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]

        }
        break;   
 800076e:	e000      	b.n	8000772 <Pingpong+0x29a>
        default:
            break;
 8000770:	bf00      	nop
        State = NextState;
 8000772:	e6ba      	b.n	80004ea <Pingpong+0x12>
 8000774:	20000028 	.word	0x20000028
 8000778:	20000029 	.word	0x20000029
 800077c:	0007a120 	.word	0x0007a120

08000780 <Led_on>:

@return void
*/

void Led_on(uint8_t Lednr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
uint8_t i;
for (i=1; i<= 8; i++)
 800078a:	2301      	movs	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e0a6      	b.n	80008de <Led_on+0x15e>
{
switch(i){
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	3b01      	subs	r3, #1
 8000794:	2b07      	cmp	r3, #7
 8000796:	f200 809f 	bhi.w	80008d8 <Led_on+0x158>
 800079a:	a201      	add	r2, pc, #4	@ (adr r2, 80007a0 <Led_on+0x20>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	080007c1 	.word	0x080007c1
 80007a4:	080007e1 	.word	0x080007e1
 80007a8:	08000801 	.word	0x08000801
 80007ac:	08000825 	.word	0x08000825
 80007b0:	08000849 	.word	0x08000849
 80007b4:	08000871 	.word	0x08000871
 80007b8:	08000899 	.word	0x08000899
 80007bc:	080008b9 	.word	0x080008b9
case 1 : // Led 1
if (Lednr==i) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d105      	bne.n	80007d4 <Led_on+0x54>
 80007c8:	2201      	movs	r2, #1
 80007ca:	2102      	movs	r1, #2
 80007cc:	4848      	ldr	r0, [pc, #288]	@ (80008f0 <Led_on+0x170>)
 80007ce:	f000 fdfb 	bl	80013c8 <HAL_GPIO_WritePin>
else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
break;
 80007d2:	e081      	b.n	80008d8 <Led_on+0x158>
else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2102      	movs	r1, #2
 80007d8:	4845      	ldr	r0, [pc, #276]	@ (80008f0 <Led_on+0x170>)
 80007da:	f000 fdf5 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 80007de:	e07b      	b.n	80008d8 <Led_on+0x158>
case 2 : // Led 2
if (Lednr==i) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007e0:	79fa      	ldrb	r2, [r7, #7]
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d105      	bne.n	80007f4 <Led_on+0x74>
 80007e8:	2201      	movs	r2, #1
 80007ea:	2104      	movs	r1, #4
 80007ec:	4840      	ldr	r0, [pc, #256]	@ (80008f0 <Led_on+0x170>)
 80007ee:	f000 fdeb 	bl	80013c8 <HAL_GPIO_WritePin>
else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
break;
 80007f2:	e071      	b.n	80008d8 <Led_on+0x158>
else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	483d      	ldr	r0, [pc, #244]	@ (80008f0 <Led_on+0x170>)
 80007fa:	f000 fde5 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 80007fe:	e06b      	b.n	80008d8 <Led_on+0x158>
case 3 : // Led 3
if (Lednr==i) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000800:	79fa      	ldrb	r2, [r7, #7]
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	429a      	cmp	r2, r3
 8000806:	d106      	bne.n	8000816 <Led_on+0x96>
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800080e:	4838      	ldr	r0, [pc, #224]	@ (80008f0 <Led_on+0x170>)
 8000810:	f000 fdda 	bl	80013c8 <HAL_GPIO_WritePin>
else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
break;
 8000814:	e060      	b.n	80008d8 <Led_on+0x158>
else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800081c:	4834      	ldr	r0, [pc, #208]	@ (80008f0 <Led_on+0x170>)
 800081e:	f000 fdd3 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 8000822:	e059      	b.n	80008d8 <Led_on+0x158>
case 4 : // Led 4
if (Lednr==i) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	429a      	cmp	r2, r3
 800082a:	d106      	bne.n	800083a <Led_on+0xba>
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000832:	482f      	ldr	r0, [pc, #188]	@ (80008f0 <Led_on+0x170>)
 8000834:	f000 fdc8 	bl	80013c8 <HAL_GPIO_WritePin>
else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
break;
 8000838:	e04e      	b.n	80008d8 <Led_on+0x158>
else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000840:	482b      	ldr	r0, [pc, #172]	@ (80008f0 <Led_on+0x170>)
 8000842:	f000 fdc1 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 8000846:	e047      	b.n	80008d8 <Led_on+0x158>
case 5 : // Led 5
if (Lednr==i) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000848:	79fa      	ldrb	r2, [r7, #7]
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	429a      	cmp	r2, r3
 800084e:	d107      	bne.n	8000860 <Led_on+0xe0>
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f000 fdb5 	bl	80013c8 <HAL_GPIO_WritePin>
else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
break;
 800085e:	e03b      	b.n	80008d8 <Led_on+0x158>
else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086a:	f000 fdad 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 800086e:	e033      	b.n	80008d8 <Led_on+0x158>
case 6 : // Led 6
if (Lednr==i) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	429a      	cmp	r2, r3
 8000876:	d107      	bne.n	8000888 <Led_on+0x108>
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800087e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000882:	f000 fda1 	bl	80013c8 <HAL_GPIO_WritePin>
else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
break;
 8000886:	e027      	b.n	80008d8 <Led_on+0x158>
else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800088e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000892:	f000 fd99 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 8000896:	e01f      	b.n	80008d8 <Led_on+0x158>
case 7 : // Led 7
if (Lednr==i) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	429a      	cmp	r2, r3
 800089e:	d105      	bne.n	80008ac <Led_on+0x12c>
 80008a0:	2201      	movs	r2, #1
 80008a2:	2120      	movs	r1, #32
 80008a4:	4813      	ldr	r0, [pc, #76]	@ (80008f4 <Led_on+0x174>)
 80008a6:	f000 fd8f 	bl	80013c8 <HAL_GPIO_WritePin>
else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
break;
 80008aa:	e015      	b.n	80008d8 <Led_on+0x158>
else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2120      	movs	r1, #32
 80008b0:	4810      	ldr	r0, [pc, #64]	@ (80008f4 <Led_on+0x174>)
 80008b2:	f000 fd89 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 80008b6:	e00f      	b.n	80008d8 <Led_on+0x158>
case 8 : // Led 8
if (Lednr==i) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d105      	bne.n	80008cc <Led_on+0x14c>
 80008c0:	2201      	movs	r2, #1
 80008c2:	2140      	movs	r1, #64	@ 0x40
 80008c4:	480b      	ldr	r0, [pc, #44]	@ (80008f4 <Led_on+0x174>)
 80008c6:	f000 fd7f 	bl	80013c8 <HAL_GPIO_WritePin>
else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
break;
 80008ca:	e004      	b.n	80008d6 <Led_on+0x156>
else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2140      	movs	r1, #64	@ 0x40
 80008d0:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <Led_on+0x174>)
 80008d2:	f000 fd79 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 80008d6:	bf00      	nop
for (i=1; i<= 8; i++)
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	3301      	adds	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	2b08      	cmp	r3, #8
 80008e2:	f67f af55 	bls.w	8000790 <Led_on+0x10>
default :
;
} // end switch
} // end for-loop
return;
 80008e6:	bf00      	nop
} // end function Led_on
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	48000400 	.word	0x48000400
 80008f4:	48000800 	.word	0x48000800

080008f8 <Led_on2>:

@return void
*/

void Led_on2(uint8_t Lednr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
uint8_t i;
for (i=1; i<= 8; i++)
 8000902:	2301      	movs	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	e07f      	b.n	8000a08 <Led_on2+0x110>
{
switch(i){
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	3b01      	subs	r3, #1
 800090c:	2b07      	cmp	r3, #7
 800090e:	d878      	bhi.n	8000a02 <Led_on2+0x10a>
 8000910:	a201      	add	r2, pc, #4	@ (adr r2, 8000918 <Led_on2+0x20>)
 8000912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000916:	bf00      	nop
 8000918:	08000939 	.word	0x08000939
 800091c:	0800094d 	.word	0x0800094d
 8000920:	08000961 	.word	0x08000961
 8000924:	08000977 	.word	0x08000977
 8000928:	0800098d 	.word	0x0800098d
 800092c:	080009a5 	.word	0x080009a5
 8000930:	080009bd 	.word	0x080009bd
 8000934:	080009d1 	.word	0x080009d1
case 1 : // Led 1
if (Lednr==i) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	429a      	cmp	r2, r3
 800093e:	d151      	bne.n	80009e4 <Led_on2+0xec>
 8000940:	2201      	movs	r2, #1
 8000942:	2102      	movs	r1, #2
 8000944:	4834      	ldr	r0, [pc, #208]	@ (8000a18 <Led_on2+0x120>)
 8000946:	f000 fd3f 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 800094a:	e04b      	b.n	80009e4 <Led_on2+0xec>
case 2 : // Led 2
if (Lednr==i) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	429a      	cmp	r2, r3
 8000952:	d149      	bne.n	80009e8 <Led_on2+0xf0>
 8000954:	2201      	movs	r2, #1
 8000956:	2104      	movs	r1, #4
 8000958:	482f      	ldr	r0, [pc, #188]	@ (8000a18 <Led_on2+0x120>)
 800095a:	f000 fd35 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 800095e:	e043      	b.n	80009e8 <Led_on2+0xf0>
case 3 : // Led 3
if (Lednr==i) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	429a      	cmp	r2, r3
 8000966:	d141      	bne.n	80009ec <Led_on2+0xf4>
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800096e:	482a      	ldr	r0, [pc, #168]	@ (8000a18 <Led_on2+0x120>)
 8000970:	f000 fd2a 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 8000974:	e03a      	b.n	80009ec <Led_on2+0xf4>
case 4 : // Led 4
if (Lednr==i) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	429a      	cmp	r2, r3
 800097c:	d138      	bne.n	80009f0 <Led_on2+0xf8>
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000984:	4824      	ldr	r0, [pc, #144]	@ (8000a18 <Led_on2+0x120>)
 8000986:	f000 fd1f 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 800098a:	e031      	b.n	80009f0 <Led_on2+0xf8>
case 5 : // Led 5
if (Lednr==i) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	429a      	cmp	r2, r3
 8000992:	d12f      	bne.n	80009f4 <Led_on2+0xfc>
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800099a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099e:	f000 fd13 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 80009a2:	e027      	b.n	80009f4 <Led_on2+0xfc>
case 6 : // Led 6
if (Lednr==i) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d125      	bne.n	80009f8 <Led_on2+0x100>
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b6:	f000 fd07 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 80009ba:	e01d      	b.n	80009f8 <Led_on2+0x100>
case 7 : // Led 7
if (Lednr==i) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d11b      	bne.n	80009fc <Led_on2+0x104>
 80009c4:	2201      	movs	r2, #1
 80009c6:	2120      	movs	r1, #32
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <Led_on2+0x124>)
 80009ca:	f000 fcfd 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 80009ce:	e015      	b.n	80009fc <Led_on2+0x104>
case 8 : // Led 8
if (Lednr==i) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d113      	bne.n	8000a00 <Led_on2+0x108>
 80009d8:	2201      	movs	r2, #1
 80009da:	2140      	movs	r1, #64	@ 0x40
 80009dc:	480f      	ldr	r0, [pc, #60]	@ (8000a1c <Led_on2+0x124>)
 80009de:	f000 fcf3 	bl	80013c8 <HAL_GPIO_WritePin>
break;
 80009e2:	e00d      	b.n	8000a00 <Led_on2+0x108>
break;
 80009e4:	bf00      	nop
 80009e6:	e00c      	b.n	8000a02 <Led_on2+0x10a>
break;
 80009e8:	bf00      	nop
 80009ea:	e00a      	b.n	8000a02 <Led_on2+0x10a>
break;
 80009ec:	bf00      	nop
 80009ee:	e008      	b.n	8000a02 <Led_on2+0x10a>
break;
 80009f0:	bf00      	nop
 80009f2:	e006      	b.n	8000a02 <Led_on2+0x10a>
break;
 80009f4:	bf00      	nop
 80009f6:	e004      	b.n	8000a02 <Led_on2+0x10a>
break;
 80009f8:	bf00      	nop
 80009fa:	e002      	b.n	8000a02 <Led_on2+0x10a>
break;
 80009fc:	bf00      	nop
 80009fe:	e000      	b.n	8000a02 <Led_on2+0x10a>
break;
 8000a00:	bf00      	nop
for (i=1; i<= 8; i++)
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	3301      	adds	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b08      	cmp	r3, #8
 8000a0c:	f67f af7c 	bls.w	8000908 <Led_on2+0x10>
default :
;
} // end switch
} // end for-loop
return;
 8000a10:	bf00      	nop
} // end function Led_on
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	48000400 	.word	0x48000400
 8000a1c:	48000800 	.word	0x48000800

08000a20 <Led_All_on>:
@brief Led_on2, turn on all pingpong leds.
@return void
*/

void Led_All_on(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2102      	movs	r1, #2
 8000a28:	4816      	ldr	r0, [pc, #88]	@ (8000a84 <Led_All_on+0x64>)
 8000a2a:	f000 fccd 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2104      	movs	r1, #4
 8000a32:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <Led_All_on+0x64>)
 8000a34:	f000 fcc8 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a3e:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <Led_All_on+0x64>)
 8000a40:	f000 fcc2 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a4a:	480e      	ldr	r0, [pc, #56]	@ (8000a84 <Led_All_on+0x64>)
 8000a4c:	f000 fcbc 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f000 fcb5 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a68:	f000 fcae 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <Led_All_on+0x68>)
 8000a72:	f000 fca9 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2140      	movs	r1, #64	@ 0x40
 8000a7a:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <Led_All_on+0x68>)
 8000a7c:	f000 fca4 	bl	80013c8 <HAL_GPIO_WritePin>

return;
 8000a80:	bf00      	nop
} // end function Led_All_on
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48000800 	.word	0x48000800

08000a8c <Led_off>:
@brief Led_off, turn off all of the pingpong leds.
@return void
*/

void Led_off(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2102      	movs	r1, #2
 8000a94:	4816      	ldr	r0, [pc, #88]	@ (8000af0 <Led_off+0x64>)
 8000a96:	f000 fc97 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	4814      	ldr	r0, [pc, #80]	@ (8000af0 <Led_off+0x64>)
 8000aa0:	f000 fc92 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aaa:	4811      	ldr	r0, [pc, #68]	@ (8000af0 <Led_off+0x64>)
 8000aac:	f000 fc8c 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ab6:	480e      	ldr	r0, [pc, #56]	@ (8000af0 <Led_off+0x64>)
 8000ab8:	f000 fc86 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac6:	f000 fc7f 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f000 fc78 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2120      	movs	r1, #32
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <Led_off+0x68>)
 8000ade:	f000 fc73 	bl	80013c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2140      	movs	r1, #64	@ 0x40
 8000ae6:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <Led_off+0x68>)
 8000ae8:	f000 fc6e 	bl	80013c8 <HAL_GPIO_WritePin>
return;
 8000aec:	bf00      	nop
} // end function Led_off
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	48000400 	.word	0x48000400
 8000af4:	48000800 	.word	0x48000800

08000af8 <Led_Flash>:
/**
@brief Led_Flash, turn on and off all of the pingpong leds.
@return void
*/

void Led_Flash(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
uint8_t i;
for (i=1; i<= 3; i++){
 8000afe:	2301      	movs	r3, #1
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	e00c      	b.n	8000b1e <Led_Flash+0x26>
    Led_All_on();
 8000b04:	f7ff ff8c 	bl	8000a20 <Led_All_on>
    HAL_Delay(100);
 8000b08:	2064      	movs	r0, #100	@ 0x64
 8000b0a:	f000 f991 	bl	8000e30 <HAL_Delay>
    Led_off();
 8000b0e:	f7ff ffbd 	bl	8000a8c <Led_off>
    HAL_Delay(100);
 8000b12:	2064      	movs	r0, #100	@ 0x64
 8000b14:	f000 f98c 	bl	8000e30 <HAL_Delay>
for (i=1; i<= 3; i++){
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d9ef      	bls.n	8000b04 <Led_Flash+0xc>
}
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <Show_Points>:
@param1 uint8_t L_points points for left player
@param2 uint8_t R_points points for right player
@return void, no return value
*/

void Show_Points(uint8_t L_points, uint8_t R_points){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	460a      	mov	r2, r1
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	71bb      	strb	r3, [r7, #6]
    
    // Show points on the left side (Left to Right)
    for (int i = 1; i <= L_points; i++){
 8000b3e:	2301      	movs	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e007      	b.n	8000b54 <Show_Points+0x26>
        Led_on(i);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fe19 	bl	8000780 <Led_on>
    for (int i = 1; i <= L_points; i++){
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	ddf3      	ble.n	8000b44 <Show_Points+0x16>
    }
    // Show points on the right side (Right to Left)
    for (int i = 8; i > 8-R_points; i--){
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	e007      	b.n	8000b72 <Show_Points+0x44>
        Led_on(i);
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fe0a 	bl	8000780 <Led_on>
    for (int i = 8; i > 8-R_points; i--){
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	79bb      	ldrb	r3, [r7, #6]
 8000b74:	f1c3 0308 	rsb	r3, r3, #8
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dcf1      	bgt.n	8000b62 <Show_Points+0x34>
    }
    return;
 8000b7e:	bf00      	nop
}
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <Show_End_Points>:

void Flash_Led(void){

}

void Show_End_Points(uint8_t L_points, uint8_t R_points){
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	460a      	mov	r2, r1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	4613      	mov	r3, r2
 8000b94:	71bb      	strb	r3, [r7, #6]
        
        // Show points on the left side (Left to Right)
        for (int i = 1; i <= L_points; i++){
 8000b96:	2301      	movs	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	e007      	b.n	8000bac <Show_End_Points+0x26>
            Led_on2(i);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fea9 	bl	80008f8 <Led_on2>
        for (int i = 1; i <= L_points; i++){
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	ddf3      	ble.n	8000b9c <Show_End_Points+0x16>
        }
        // Show points on the right side (Right to Left)
        for (int i = 8; i > 8-R_points; i--){
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	e007      	b.n	8000bca <Show_End_Points+0x44>
            Led_on2(i);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fe9a 	bl	80008f8 <Led_on2>
        for (int i = 8; i > 8-R_points; i--){
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	79bb      	ldrb	r3, [r7, #6]
 8000bcc:	f1c3 0308 	rsb	r3, r3, #8
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	dcf1      	bgt.n	8000bba <Show_End_Points+0x34>
        }
        return;
 8000bd6:	bf00      	nop
}
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <L_hit>:
@brief L_hit, check if L button is pressed
@param void
@return bool, true if L button pushed, false otherwise
*/

bool L_hit(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(L_button_GPIO_Port, L_button_Pin) == 0) return true;
 8000be4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <L_hit+0x20>)
 8000bea:	f000 fbd5 	bl	8001398 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <L_hit+0x18>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <L_hit+0x1a>
else return false;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	48000400 	.word	0x48000400

08000c04 <R_hit>:
@brief L_hit, check if L button is pressed
@param void
@return bool, true if L button pushed, false otherwise
*/

bool R_hit(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(R_button_GPIO_Port, R_button_Pin) == 0) return true;
 8000c08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0c:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <R_hit+0x20>)
 8000c0e:	f000 fbc3 	bl	8001398 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <R_hit+0x18>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <R_hit+0x1a>
else return false;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	48000800 	.word	0x48000800

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c32:	4a0e      	ldr	r2, [pc, #56]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <NMI_Handler+0x4>

08000c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <MemManage_Handler+0x4>

08000c88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc6:	f000 f893 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cf8:	f7ff ffea 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	@ (8000d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <LoopForever+0xe>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	@ (8000d40 <LoopForever+0x16>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d22:	f001 f99d 	bl	8002060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d26:	f7ff fafb 	bl	8000320 <main>

08000d2a <LoopForever>:

LoopForever:
    b LoopForever
 8000d2a:	e7fe      	b.n	8000d2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d38:	08002108 	.word	0x08002108
  ldr r2, =_sbss
 8000d3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d40:	20000030 	.word	0x20000030

08000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>

08000d46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f943 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d56:	200f      	movs	r0, #15
 8000d58:	f000 f80e 	bl	8000d78 <HAL_InitTick>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	e001      	b.n	8000d6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d68:	f7ff ff5e 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d84:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <HAL_InitTick+0x6c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d023      	beq.n	8000dd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d8c:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <HAL_InitTick+0x70>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_InitTick+0x6c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f941 	bl	800102a <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10f      	bne.n	8000dce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d809      	bhi.n	8000dc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f919 	bl	8000ff2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_InitTick+0x74>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e007      	b.n	8000dd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e004      	b.n	8000dd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	e001      	b.n	8000dd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000004 	.word	0x20000004

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	2000002c 	.word	0x2000002c

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	2000002c 	.word	0x2000002c

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	@ (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	@ (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	@ 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff47 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff5c 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffb0 	bl	8000f98 <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	e17f      	b.n	8001354 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8171 	beq.w	800134e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d005      	beq.n	8001084 <HAL_GPIO_Init+0x40>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	f003 0201 	and.w	r2, r3, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d118      	bne.n	8001124 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010f8:	2201      	movs	r2, #1
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	f003 0201 	and.w	r2, r3, #1
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b03      	cmp	r3, #3
 800112e:	d017      	beq.n	8001160 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d123      	bne.n	80011b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	6939      	ldr	r1, [r7, #16]
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0203 	and.w	r2, r3, #3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80ac 	beq.w	800134e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001374 <HAL_GPIO_Init+0x330>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001374 <HAL_GPIO_Init+0x330>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6613      	str	r3, [r2, #96]	@ 0x60
 8001202:	4b5c      	ldr	r3, [pc, #368]	@ (8001374 <HAL_GPIO_Init+0x330>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800120e:	4a5a      	ldr	r2, [pc, #360]	@ (8001378 <HAL_GPIO_Init+0x334>)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x242>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4f      	ldr	r2, [pc, #316]	@ (800137c <HAL_GPIO_Init+0x338>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x23e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	@ (8001380 <HAL_GPIO_Init+0x33c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x23a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	@ (8001384 <HAL_GPIO_Init+0x340>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x236>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	@ (8001388 <HAL_GPIO_Init+0x344>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x232>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	@ (800138c <HAL_GPIO_Init+0x348>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x22e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4a      	ldr	r2, [pc, #296]	@ (8001390 <HAL_GPIO_Init+0x34c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x22a>
 800126a:	2306      	movs	r3, #6
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800126e:	2307      	movs	r3, #7
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001286:	2300      	movs	r3, #0
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001298:	4937      	ldr	r1, [pc, #220]	@ (8001378 <HAL_GPIO_Init+0x334>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001394 <HAL_GPIO_Init+0x350>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ca:	4a32      	ldr	r2, [pc, #200]	@ (8001394 <HAL_GPIO_Init+0x350>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d0:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <HAL_GPIO_Init+0x350>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f4:	4a27      	ldr	r2, [pc, #156]	@ (8001394 <HAL_GPIO_Init+0x350>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <HAL_GPIO_Init+0x350>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800131e:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <HAL_GPIO_Init+0x350>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <HAL_GPIO_Init+0x350>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001348:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <HAL_GPIO_Init+0x350>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	f47f ae78 	bne.w	8001054 <HAL_GPIO_Init+0x10>
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	48001000 	.word	0x48001000
 800138c:	48001400 	.word	0x48001400
 8001390:	48001800 	.word	0x48001800
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <HAL_PWREx_GetVoltageRange+0x18>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000

08001414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001422:	d130      	bne.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800142c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001430:	d038      	beq.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2232      	movs	r2, #50	@ 0x32
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	4a1b      	ldr	r2, [pc, #108]	@ (80014bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0c9b      	lsrs	r3, r3, #18
 8001454:	3301      	adds	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001458:	e002      	b.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3b01      	subs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146c:	d102      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x60>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f2      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001480:	d110      	bne.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e00f      	b.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800148e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001492:	d007      	beq.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001494:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800149c:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40007000 	.word	0x40007000
 80014b8:	20000000 	.word	0x20000000
 80014bc:	431bde83 	.word	0x431bde83

080014c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e3ca      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d2:	4b97      	ldr	r3, [pc, #604]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014dc:	4b94      	ldr	r3, [pc, #592]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80e4 	beq.w	80016bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_RCC_OscConfig+0x4a>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	f040 808b 	bne.w	8001618 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b01      	cmp	r3, #1
 8001506:	f040 8087 	bne.w	8001618 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150a:	4b89      	ldr	r3, [pc, #548]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x62>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e3a2      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	4b82      	ldr	r3, [pc, #520]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_RCC_OscConfig+0x7c>
 8001532:	4b7f      	ldr	r3, [pc, #508]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800153a:	e005      	b.n	8001548 <HAL_RCC_OscConfig+0x88>
 800153c:	4b7c      	ldr	r3, [pc, #496]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800153e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001548:	4293      	cmp	r3, r2
 800154a:	d223      	bcs.n	8001594 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fd1d 	bl	8001f90 <RCC_SetFlashLatencyFromMSIRange>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e383      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001560:	4b73      	ldr	r3, [pc, #460]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a72      	ldr	r2, [pc, #456]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b70      	ldr	r3, [pc, #448]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	496d      	ldr	r1, [pc, #436]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157e:	4b6c      	ldr	r3, [pc, #432]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	4968      	ldr	r1, [pc, #416]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
 8001592:	e025      	b.n	80015e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001594:	4b66      	ldr	r3, [pc, #408]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a65      	ldr	r2, [pc, #404]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b63      	ldr	r3, [pc, #396]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4960      	ldr	r1, [pc, #384]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	495b      	ldr	r1, [pc, #364]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fcdd 	bl	8001f90 <RCC_SetFlashLatencyFromMSIRange>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e343      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015e0:	f000 fc4a 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b52      	ldr	r3, [pc, #328]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	4950      	ldr	r1, [pc, #320]	@ (8001734 <HAL_RCC_OscConfig+0x274>)
 80015f2:	5ccb      	ldrb	r3, [r1, r3]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001738 <HAL_RCC_OscConfig+0x278>)
 80015fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001600:	4b4e      	ldr	r3, [pc, #312]	@ (800173c <HAL_RCC_OscConfig+0x27c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fbb7 	bl	8000d78 <HAL_InitTick>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d052      	beq.n	80016ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	e327      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d032      	beq.n	8001686 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001620:	4b43      	ldr	r3, [pc, #268]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a42      	ldr	r2, [pc, #264]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800162c:	f7ff fbf4 	bl	8000e18 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001634:	f7ff fbf0 	bl	8000e18 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e310      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001646:	4b3a      	ldr	r3, [pc, #232]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a36      	ldr	r2, [pc, #216]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4931      	ldr	r1, [pc, #196]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001670:	4b2f      	ldr	r3, [pc, #188]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	492c      	ldr	r1, [pc, #176]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e01a      	b.n	80016bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001686:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a29      	ldr	r2, [pc, #164]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001692:	f7ff fbc1 	bl	8000e18 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169a:	f7ff fbbd 	bl	8000e18 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e2dd      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ac:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x1da>
 80016b8:	e000      	b.n	80016bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d074      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x21a>
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d10e      	bne.n	80016f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d10b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d064      	beq.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d160      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e2ba      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x24a>
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e026      	b.n	8001758 <HAL_RCC_OscConfig+0x298>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001712:	d115      	bne.n	8001740 <HAL_RCC_OscConfig+0x280>
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800171a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a02      	ldr	r2, [pc, #8]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x298>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	080020c0 	.word	0x080020c0
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004
 8001740:	4ba0      	ldr	r3, [pc, #640]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a9f      	ldr	r2, [pc, #636]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b9d      	ldr	r3, [pc, #628]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a9c      	ldr	r2, [pc, #624]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fb5a 	bl	8000e18 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fb56 	bl	8000e18 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	@ 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e276      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177a:	4b92      	ldr	r3, [pc, #584]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x2a8>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fb46 	bl	8000e18 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fb42 	bl	8000e18 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	@ 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e262      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a2:	4b88      	ldr	r3, [pc, #544]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x2d0>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d060      	beq.n	8001880 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x310>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d116      	bne.n	80017fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d0:	4b7c      	ldr	r3, [pc, #496]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x328>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e23f      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b76      	ldr	r3, [pc, #472]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	4973      	ldr	r1, [pc, #460]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fc:	e040      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d023      	beq.n	800184e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001806:	4b6f      	ldr	r3, [pc, #444]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6e      	ldr	r2, [pc, #440]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fb01 	bl	8000e18 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff fafd 	bl	8000e18 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e21d      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182c:	4b65      	ldr	r3, [pc, #404]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b62      	ldr	r3, [pc, #392]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	495f      	ldr	r1, [pc, #380]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
 800184c:	e018      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184e:	4b5d      	ldr	r3, [pc, #372]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5c      	ldr	r2, [pc, #368]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fadd 	bl	8000e18 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff fad9 	bl	8000e18 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1f9      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001874:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d03c      	beq.n	8001906 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01c      	beq.n	80018ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001894:	4b4b      	ldr	r3, [pc, #300]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800189a:	4a4a      	ldr	r2, [pc, #296]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff fab8 	bl	8000e18 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff fab4 	bl	8000e18 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1d4      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018be:	4b41      	ldr	r3, [pc, #260]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0ef      	beq.n	80018ac <HAL_RCC_OscConfig+0x3ec>
 80018cc:	e01b      	b.n	8001906 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b3d      	ldr	r3, [pc, #244]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d4:	4a3b      	ldr	r2, [pc, #236]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fa9b 	bl	8000e18 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa97 	bl	8000e18 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1b7      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f8:	4b32      	ldr	r3, [pc, #200]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ef      	bne.n	80018e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80a6 	beq.w	8001a60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001918:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	4a26      	ldr	r2, [pc, #152]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001930:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193c:	2301      	movs	r3, #1
 800193e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001940:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <HAL_RCC_OscConfig+0x508>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d118      	bne.n	800197e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800194c:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <HAL_RCC_OscConfig+0x508>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1d      	ldr	r2, [pc, #116]	@ (80019c8 <HAL_RCC_OscConfig+0x508>)
 8001952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001958:	f7ff fa5e 	bl	8000e18 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001960:	f7ff fa5a 	bl	8000e18 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e17a      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_RCC_OscConfig+0x508>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_RCC_OscConfig+0x4d8>
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001996:	e029      	b.n	80019ec <HAL_RCC_OscConfig+0x52c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d115      	bne.n	80019cc <HAL_RCC_OscConfig+0x50c>
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a6:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b6:	4a03      	ldr	r2, [pc, #12]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019c0:	e014      	b.n	80019ec <HAL_RCC_OscConfig+0x52c>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
 80019cc:	4b9c      	ldr	r3, [pc, #624]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d2:	4a9b      	ldr	r2, [pc, #620]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019dc:	4b98      	ldr	r3, [pc, #608]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e2:	4a97      	ldr	r2, [pc, #604]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d016      	beq.n	8001a22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f4:	f7ff fa10 	bl	8000e18 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fc:	f7ff fa0c 	bl	8000e18 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e12a      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a12:	4b8b      	ldr	r3, [pc, #556]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ed      	beq.n	80019fc <HAL_RCC_OscConfig+0x53c>
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff f9f9 	bl	8000e18 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f9f5 	bl	8000e18 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e113      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a40:	4b7f      	ldr	r3, [pc, #508]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ed      	bne.n	8001a2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a54:	4b7a      	ldr	r3, [pc, #488]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	4a79      	ldr	r2, [pc, #484]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80fe 	beq.w	8001c66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	f040 80d0 	bne.w	8001c14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a74:	4b72      	ldr	r3, [pc, #456]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d130      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	3b01      	subs	r3, #1
 8001a94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d127      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d11f      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ab4:	2a07      	cmp	r2, #7
 8001ab6:	bf14      	ite	ne
 8001ab8:	2201      	movne	r2, #1
 8001aba:	2200      	moveq	r2, #0
 8001abc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d113      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d06e      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d069      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001af0:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001afc:	4b50      	ldr	r3, [pc, #320]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0ad      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a4b      	ldr	r2, [pc, #300]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b18:	f7ff f97e 	bl	8000e18 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f97a 	bl	8000e18 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e09a      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b32:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3e:	4b40      	ldr	r3, [pc, #256]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <HAL_RCC_OscConfig+0x784>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b4e:	3a01      	subs	r2, #1
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b58:	0212      	lsls	r2, r2, #8
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b60:	0852      	lsrs	r2, r2, #1
 8001b62:	3a01      	subs	r2, #1
 8001b64:	0552      	lsls	r2, r2, #21
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b6c:	0852      	lsrs	r2, r2, #1
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	0652      	lsls	r2, r2, #25
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b78:	0912      	lsrs	r2, r2, #4
 8001b7a:	0452      	lsls	r2, r2, #17
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	4930      	ldr	r1, [pc, #192]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b84:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2d      	ldr	r2, [pc, #180]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4a2a      	ldr	r2, [pc, #168]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b9c:	f7ff f93c 	bl	8000e18 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f938 	bl	8000e18 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e058      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc2:	e050      	b.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e04f      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d148      	bne.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be0:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a16      	ldr	r2, [pc, #88]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bec:	f7ff f914 	bl	8000e18 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f910 	bl	8000e18 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e030      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x734>
 8001c12:	e028      	b.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d023      	beq.n	8001c62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f8f7 	bl	8000e18 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	e00c      	b.n	8001c48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f8f3 	bl	8000e18 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d905      	bls.n	8001c48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e013      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
 8001c40:	40021000 	.word	0x40021000
 8001c44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ec      	bne.n	8001c2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4905      	ldr	r1, [pc, #20]	@ (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_RCC_OscConfig+0x7b4>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
 8001c60:	e001      	b.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	feeefffc 	.word	0xfeeefffc

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0e7      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d910      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b72      	ldr	r3, [pc, #456]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4970      	ldr	r1, [pc, #448]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b6e      	ldr	r3, [pc, #440]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0cf      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b66      	ldr	r3, [pc, #408]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d908      	bls.n	8001cea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b63      	ldr	r3, [pc, #396]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4960      	ldr	r1, [pc, #384]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d04c      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d121      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0a6      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d16:	4b54      	ldr	r3, [pc, #336]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e09a      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e08e      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e086      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b46      	ldr	r3, [pc, #280]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4943      	ldr	r1, [pc, #268]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d60:	f7ff f85a 	bl	8000e18 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7ff f856 	bl	8000e18 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e06e      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d208      	bcs.n	8001dbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	492b      	ldr	r1, [pc, #172]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d210      	bcs.n	8001dee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 0207 	bic.w	r2, r3, #7
 8001dd4:	4923      	ldr	r1, [pc, #140]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e036      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	4918      	ldr	r1, [pc, #96]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4910      	ldr	r1, [pc, #64]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e2c:	f000 f824 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	490b      	ldr	r1, [pc, #44]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f4>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	4a09      	ldr	r2, [pc, #36]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1fc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ff91 	bl	8000d78 <HAL_InitTick>
 8001e56:	4603      	mov	r3, r0
 8001e58:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	080020c0 	.word	0x080020c0
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	4b3b      	ldr	r3, [pc, #236]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x34>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d121      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d11e      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eac:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e004      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001efc:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001efe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d134      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d003      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xac>
 8001f1c:	e005      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f20:	617b      	str	r3, [r7, #20]
      break;
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f24:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f26:	617b      	str	r3, [r7, #20]
      break;
 8001f28:	e002      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	fb03 f202 	mul.w	r2, r3, r2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	0e5b      	lsrs	r3, r3, #25
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	3301      	adds	r3, #1
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f70:	69bb      	ldr	r3, [r7, #24]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	080020d0 	.word	0x080020d0
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	007a1200 	.word	0x007a1200

08001f90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fa8:	f7ff fa26 	bl	80013f8 <HAL_PWREx_GetVoltageRange>
 8001fac:	6178      	str	r0, [r7, #20]
 8001fae:	e014      	b.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	4a24      	ldr	r2, [pc, #144]	@ (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fbc:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fc8:	f7ff fa16 	bl	80013f8 <HAL_PWREx_GetVoltageRange>
 8001fcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fe0:	d10b      	bne.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b80      	cmp	r3, #128	@ 0x80
 8001fe6:	d919      	bls.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fec:	d902      	bls.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fee:	2302      	movs	r3, #2
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e013      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e010      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b80      	cmp	r3, #128	@ 0x80
 8001ffe:	d902      	bls.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002000:	2303      	movs	r3, #3
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	e00a      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b80      	cmp	r3, #128	@ 0x80
 800200a:	d102      	bne.n	8002012 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800200c:	2302      	movs	r3, #2
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	e004      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b70      	cmp	r3, #112	@ 0x70
 8002016:	d101      	bne.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002018:	2301      	movs	r3, #1
 800201a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 0207 	bic.w	r2, r3, #7
 8002024:	4909      	ldr	r1, [pc, #36]	@ (800204c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800202c:	4b07      	ldr	r3, [pc, #28]	@ (800204c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	429a      	cmp	r2, r3
 8002038:	d001      	beq.n	800203e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	40022000 	.word	0x40022000

08002050 <memset>:
 8002050:	4402      	add	r2, r0
 8002052:	4603      	mov	r3, r0
 8002054:	4293      	cmp	r3, r2
 8002056:	d100      	bne.n	800205a <memset+0xa>
 8002058:	4770      	bx	lr
 800205a:	f803 1b01 	strb.w	r1, [r3], #1
 800205e:	e7f9      	b.n	8002054 <memset+0x4>

08002060 <__libc_init_array>:
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	4d0d      	ldr	r5, [pc, #52]	@ (8002098 <__libc_init_array+0x38>)
 8002064:	4c0d      	ldr	r4, [pc, #52]	@ (800209c <__libc_init_array+0x3c>)
 8002066:	1b64      	subs	r4, r4, r5
 8002068:	10a4      	asrs	r4, r4, #2
 800206a:	2600      	movs	r6, #0
 800206c:	42a6      	cmp	r6, r4
 800206e:	d109      	bne.n	8002084 <__libc_init_array+0x24>
 8002070:	4d0b      	ldr	r5, [pc, #44]	@ (80020a0 <__libc_init_array+0x40>)
 8002072:	4c0c      	ldr	r4, [pc, #48]	@ (80020a4 <__libc_init_array+0x44>)
 8002074:	f000 f818 	bl	80020a8 <_init>
 8002078:	1b64      	subs	r4, r4, r5
 800207a:	10a4      	asrs	r4, r4, #2
 800207c:	2600      	movs	r6, #0
 800207e:	42a6      	cmp	r6, r4
 8002080:	d105      	bne.n	800208e <__libc_init_array+0x2e>
 8002082:	bd70      	pop	{r4, r5, r6, pc}
 8002084:	f855 3b04 	ldr.w	r3, [r5], #4
 8002088:	4798      	blx	r3
 800208a:	3601      	adds	r6, #1
 800208c:	e7ee      	b.n	800206c <__libc_init_array+0xc>
 800208e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002092:	4798      	blx	r3
 8002094:	3601      	adds	r6, #1
 8002096:	e7f2      	b.n	800207e <__libc_init_array+0x1e>
 8002098:	08002100 	.word	0x08002100
 800209c:	08002100 	.word	0x08002100
 80020a0:	08002100 	.word	0x08002100
 80020a4:	08002104 	.word	0x08002104

080020a8 <_init>:
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	bf00      	nop
 80020ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ae:	bc08      	pop	{r3}
 80020b0:	469e      	mov	lr, r3
 80020b2:	4770      	bx	lr

080020b4 <_fini>:
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	bf00      	nop
 80020b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ba:	bc08      	pop	{r3}
 80020bc:	469e      	mov	lr, r3
 80020be:	4770      	bx	lr
